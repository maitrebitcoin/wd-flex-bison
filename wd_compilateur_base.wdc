#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wd_compilateur_base
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x12bbe1f100ecf7ba
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1-
      wd_compilateur_base est une Classe
      	m_lexer est wd_lexer_base dynamique
      	en_mode_debug est un booléen 
      	
      	// règles de productions générée par wdBidon en fonction du .y
      	tab_règle_grammaire	est un tableau de RegleDeGrammaire		
      	// pile de compilation
      	pile_compilation est une pile de NiveauPile
      fin
      
      CONSTANT TOKEN_EOF   = -1 // fin de fichier
      CONSTANT TOKEN_AUCUN = 0  // aucun token valide
      EActionSurToken est une Enumération
      	Shift			= 1 // lire le token suivant
      	Reduce			= 2 // regroupe les token
      	EndCompile		= 3 // fin de la compilation
      	ErrorCompile	= 4 // lever un erreur de grammamire
      FIN
      RegleDeGrammaire est une structure
      	// n° de la règle
      	numero_règle	est entier
      	// nom pour debug
      	Nom				est chaine
      	// liste des indice de token pour  séparé par ","
      	liste_indices_token est chaine
      	// code a exécuter lors de la réduction
      	code_a_executer est une procédure
      FIN
      NiveauPile est une structure
      	// n° de la règle
      	numero_règle	est entier
      	// valeur de $$
      	valeur_user est variant
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1349920938546558906
     type_code : 27
     code : |1+
      procédure Constructeur()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1349920938546624442
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : _ajoute_regle_grammaire
     procedure_id : 1355635959454801733
     type_code : 12
     code : |1+
      // appelé par la classe générée pour déclarer les règles de grammaires 
      procédure PROTÉGÉE _ajoute_regle_grammaire(numero_règle est un entier, nom chaine, liste_indices_token est une chaîne, code_a_executer est procédure )
      dbgAssertion(nom<>"")
      dbgAssertion(numero_règle>0)
      
      nouvelle_règle est RegleDeGrammaire 
      nouvelle_règle.numero_règle		   = numero_règle
      nouvelle_règle.nom 				   = nom
      nouvelle_règle.liste_indices_token = liste_indices_token
      nouvelle_règle.code_a_executer	  = code_a_executer
      :tab_règle_grammaire.Ajoute(nouvelle_règle)
     type : 458752
   -
     name : _compile_chaine
     procedure_id : 1349920938546689978
     type_code : 12
     code : |1-
      // point d'entrée interne du compilateur généré
      PROCÉDURE protégée _compile_chaine( source_a_compiler est chaîne UNICODE, lexer est un wd_lexer_base) : booléen
      
      // pile des token en attende de pouvoir générer une règle valide (= faire un reduce)
      pile_token est chaine	
      yyline est entier
      // Init lexer
      m_lexer <- lexer 
      m_lexer.set_source(source_a_compiler)
      m_lexer.etat_courant_lexer = 1 // = Etat_lexer_tous
      
      BOUCLE
      	// récupération du token suivant 
      	yyline = m_lexer:numéro_ligne_en_cours
      	valeur_token_courant est entier =  m_lexer.token_suivant()
      	// si c'est la fin du fichier
      	SI valeur_token_courant = TOKEN_EOF  ALORS
      		// erreur de la compilation
      		_erreur(<§R12ba93c90093b02d¤fr-FR¤Il manque la fin§>)
      		renvoyer faux
      	FIN
      	// si on a trouvé aucune règle de production valide
      	SI valeur_token_courant = ::TOKEN_AUCUN ALORS
      		// erreur de compilation
      		text_ligne_courante	est chaîne	= m_lexer:source_découpée_en_ligne[m_lexer:numéro_ligne_en_cours]
      		chaine_restante		est chaîne	= Milieu( text_ligne_courante, m_lexer:numéro_colonne_en_cours)			
      		_erreur( ChaîneConstruit(<§R12ba93d30094d5f5¤fr-FR¤Erreur de syntaxe : %1§>, chaine_restante ) )
      		RENVOYER Faux		
      	FIN
      	SI en_mode_debug ALORS
      		// trace chaque token
      		Trace( valeur_token_courant + tab + m_lexer:yytext + TAB + m_lexer:numéro_ligne_en_cours)
      	FIN	
      	// on calcule ce qu'on doit faire avec ce token
      	action_token est EActionSurToken  
      	numero_regle_reduce est entier
      	(action_token,numero_regle_reduce)= _calcule_action_token(valeur_token_courant, pile_token)
      	selon action_token 
      		cas ErrorCompile 
      			// compilation terminée en erreur
      			RENVOYER Faux		
      		cas Shift	
      			niveau_shifr est NiveauPile
      			niveau_shifr.numero_règle	= valeur_token_courant
      			niveau_shifr.valeur_user	= m_lexer:yytext
      			Empile(  pile_compilation, niveau_shifr)
      			
      			// lire le token suivant		
      			CONTINUE 
      		cas EndCompile
      			// compilation terminée OK
      			renvoyer vrai
      		cas Reduce		
      			// regroupe les token
      			// exécuter l'action de la règle numero_regle_reduce
      			P1 est variant 
      			Dépile(  pile_compilation, P1)
      			niveau_courant est NiveauPile
      			niveau_courant.numero_règle = numero_regle_reduce
      			niveau_courant.valeur_user  = tab_règle_grammaire[numero_regle_reduce].code_a_executer( P1 )
      			Empile(  pile_compilation, niveau_courant)
      			
      	FIN
      	
      	
      FIN
     type : 458752
   -
     name : _calcule_action_token
     procedure_id : 1349920938546755514
     type_code : 12
     code : |1+
      PROCÉDURE _calcule_action_token(token est un entier, pile est chaine) : (EActionSurToken,entier)
      
      SI token = TOKEN_EOF ALORS
      	RENVOYER (ErrorCompile,0)
      FIN
      
      // calcul nouvel état avec ce nouveau token
      pile_avec_token	est chaine	= pile + [","] + token
      
      // recherche les règles qui peuvent correspondre
      nombre_regle_possible	est entier		= 0
      numero_regle est entier=1
      POUR TOUT regle_de_grammaire DE :tab_règle_grammaire
      	// si c'est exactement cette règle
      	si regle_de_grammaire.liste_indices_token = pile_avec_token ALORS
      		// trouvé
      		renvoyer  (Reduce,numero_regle)
      	FIN
      	// si c'est un début possible
      	si regle_de_grammaire.liste_indices_token.commencepar(pile_avec_token) ALORS
      		nombre_regle_possible++
      	FIN
      	numero_regle++
      FIN
      // si aucune règle ne peut correspondre
      si nombre_regle_possible=0 ALORS
      	// erreur de grammaire
      	renvoyer (ErrorCompile,0)
      FIN
      
      
      RENVOYER (Shift,0)
     type : 458752
   -
     name : _erreur
     procedure_id : 1349920938546821050
     type_code : 12
     code : |1+
      // lever une erreur de compilation
      procédure _erreur( message_erreur est chaine)
      
      text_ligne_courante	est chaîne	= m_lexer:source_découpée_en_ligne[m_lexer:numéro_ligne_en_cours]
      chaine_restante		est chaîne	= Milieu( text_ligne_courante, m_lexer:numéro_colonne_en_cours)		
      m_lexer:_erreur( ChaîneConstruit("ligne %1: %2"+rc+ "%3" , m_lexer:numéro_ligne_en_cours,text_ligne_courante, message_erreur ) )
     type : 458752
   -
     name : get_texte_erreur
     procedure_id : 1349920938546886586
     type_code : 12
     code : |1+
      // renvoie le texte de la dernière erreur
      procédure get_texte_erreur() : chaîne
      renvoyer m_lexer:m_sErreur
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x12ba8dc50078330e
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
