#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wd_compilateur_base
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x12bbe1f100ecf7ba
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1-
      wd_compilateur_base est une Classe
      	m_lexer est wd_lexer_base dynamique
      	en_mode_debug est un booléen 
      	
      	// règles de productions générée par wdBidon en fonction du .y
      	tab_règle_grammaire	est un tableau de RegleDeGrammaire		
      	//  #TODO token racine tel que défini par %start
      	token_start est un entier
      	// pile de compilation
      	pile_compilation est un tableau de NiveauPile
      	// "" si tout est ok ou erreur en cours
      	dernière_erreur	est chaine		
      
      	// pour Debug, token => nom. replis uniquement si compilateur avec option Debug
      	// valeurs associées pour chaque  %token
      	debug_token_int_vers_nom est un tableau associatif de chaîne
      fin
      
      // les TOKEN sont un entier représentant un caractère :
      // -1 et 01        : TOKEN_EOF et TOKEN_AUCUN
      // entre 32 et 255 : le caractère. ex 65="A"
      // >255            : un Token défini par %token, ou un n° de règle de grammaire
      // TOKEN est un type
      CONSTANT TOKEN_EOF   = 0 // fin de fichier
      CONSTANT TOKEN_AUCUN = -1  // aucun token valide
      
      RegleDeGrammaire est une structure
      	// n° de la règle
      	TOKEN_numero_règle	est entier
      	// nom pour debug
      	Nom				est chaine
      	// liste des indice de token pour valider la règle séparé par "," (pour debug)
      	debug_liste_indices_token est chaine
      	// version en tableau
      	tab_indices_token est tableau d'entier
      	// code a exécuter lors de la réduction
      	code_a_executer est une procédure
      	// nombre de paramètres
      	nombre_de_paramètre est un entier
      FIN
      NiveauPile est une structure
      	// n° de la règle
      	TOKEN_numero_règle	est entier
      	// valeur de $$
      	valeur_user est variant
      fin
      ErreurCompile est une structure
      	fichier_source est chaîne
      	num_ligne 	   est entier
      	message_err    est chaine
      	pile_dbg	   est chaine
      fin
      EActionReduce est une énumération
      	ErreurDeGrammaire // erreur : aucune règle possible
      	RegroupeRegle // on on regroupé de règles
      	PlusDeToken   // il faut plus de token
      fin
      
      constant SYNTAX_ERROR = <§R13025f3000e43747¤fr-FR¤Erreur de syntaxe : %1§>
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1349920938546558906
     type_code : 27
     code : |1+
      procédure Constructeur()
     type : 589824
   -
     name : Destructeur
     procedure_id : 1349920938546624442
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : _ajoute_regle_grammaire
     procedure_id : 1355635959454801733
     type_code : 12
     code : |1+
      // appelé par la classe générée pour déclarer les règles de grammaires 
      procédure PROTÉGÉE _ajoute_regle_grammaire(TOKEN_numero_règle est un entier, nom chaine, liste_indices_token est une chaîne, code_a_executer est procédure )
      dbgAssertion(nom<>"")
      dbgAssertion(TOKEN_numero_règle>0)
      
      nouvelle_règle est RegleDeGrammaire 
      nouvelle_règle.TOKEN_numero_règle  = TOKEN_numero_règle
      nouvelle_règle.nom 				   = nom
      nouvelle_règle.debug_liste_indices_token = liste_indices_token
      pour TOUTE CHAÎNE sTok DE liste_indices_token SÉPARÉE PAR ","
      	TOKEN_sous_regle est entier = sTok
      	nouvelle_règle.tab_indices_token.Ajoute( TOKEN_sous_regle)
      FIN
      
      nouvelle_règle.nombre_de_paramètre = ChaîneOccurrence(liste_indices_token,",") + 1
      nouvelle_règle.code_a_executer	   = code_a_executer
      :tab_règle_grammaire.Ajoute(nouvelle_règle)
     type : 458752
   -
     name : _ajoute_regle_token
     procedure_id : 1439903986609918398
     type_code : 12
     code : |1+
      // appelé par la classe générée pour déclarer un token 
      procédure Protégée _ajoute_regle_token(TOKEN_numero_règle est un entier, nom chaine)
      
      :debug_token_int_vers_nom[TOKEN_numero_règle] = nom
      
     type : 458752
   -
     name : _empile
     procedure_id : 1440488574609680267
     type_code : 12
     code : |1+
      procédure protégé _empile( niveau est NiveauPile)
      
      :pile_compilation.insère(1, niveau)
     type : 458752
   -
     name : _dépile
     procedure_id : 1440488737818541129
     type_code : 12
     code : |1-
      procédure protégée _dépile() : NiveauPile
      
      niveau est NiveauPile <- pile_compilation[1]
      :pile_compilation.supprime(1)
      renvoyer niveau 
     type : 458752
   -
     name : _bPileValideALaFinDuFichier
     procedure_id : 1440483936044968882
     type_code : 12
     code : |1+
      // indique si la pile est valide a la fin de la compilation
      procédure protégée _bPileValideALaFinDuFichier()
      
      si :pile_compilation..Occurrence<>1 ALORS
      	renvoyer faux
      FIN
      TOKEN_fin est entier = :pile_compilation[1].TOKEN_numero_règle
      regle_fin est RegleDeGrammaire <- :tab_règle_grammaire[TOKEN_fin]
      // ma règle terminale a 0 = EOF comme dernier token
      si regle_fin=Null ALORS
      	renvoyer  faux
      FIN
      si regle_fin.tab_indices_token[ regle_fin.nombre_de_paramètre ] <>0 ALORS
      	renvoyer faux
      FIN
      // OK , regle racine
      renvoyer vrai
     type : 458752
   -
     name : _compile_chaine_avec_lexer
     procedure_id : 1349920938546689978
     type_code : 12
     code : |1+
      // point d'entrée interne du compilateur généré
      PROCÉDURE protégée _compile_chaine_avec_lexer( source_a_compiler est chaîne UNICODE, lexer est un wd_lexer_base) : booléen
      
      	
      ligne_encours est entier // yylineno dans flex
      colonne_encours est entier
      	procédure interne _erreur_de_syntaxe()
      		text_ligne_courante	est chaîne	= m_lexer:source_découpée_en_ligne[ligne_encours]
      		chaine_restante		est chaîne	= Milieu( text_ligne_courante,colonne_encours)		
      		_erreur_de_compilation( ChaîneConstruit(::SYNTAX_ERROR, chaine_restante) )
      	FIN
      
      // Init lexer
      m_lexer <- lexer 
      m_lexer.set_source(source_a_compiler)
      m_lexer.etat_courant_lexer = 1 // = Etat_lexer_tous
      
      // init actions possibles : toutes sont possibles
      tabActionPossible est un tableau d'entier
      pour i=1 _a_ :tab_règle_grammaire..Occurrence
      	tabActionPossible.ajoute(i)
      fin	
      	
      BOUCLE
      	// récupération du token suivant 
      	ligne_encours   = m_lexer:numéro_ligne_en_cours
      	colonne_encours = m_lexer:numéro_colonne_en_cours
      	TOKEN_valeur_token_courant est entier =  m_lexer.token_suivant()
      
      	// si on a trouvé aucune règle de production valide
      	SI TOKEN_valeur_token_courant = ::TOKEN_AUCUN ALORS
      		// erreur de compilation
      		_erreur_de_syntaxe()
      		RENVOYER Faux		
      	FIN
      	// si c'est la fin du fichier
      	SI TOKEN_valeur_token_courant = ::TOKEN_EOF ALORS
      		// on vérifie que la pile correspond a la racine sinon il manque des tokens 		
      		si pas _bPileValideALaFinDuFichier() ALORS
      			// erreur de compilation
      			_erreur_de_syntaxe()
      			renvoyer faux
      		FIN
      		// compilation terminée OK
      		RENVOYER Vrai
      	FIN
      	
      	// Opération de SHIFT : 
      	// Ajoute le token a la pile de compilation
      	niveau_shift est NiveauPile
      	niveau_shift.TOKEN_numero_règle	= TOKEN_valeur_token_courant
      	niveau_shift.valeur_user		= m_lexer:yytext
      	_Empile( niveau_shift)
      	
      	// Opération de REDUCE :
      	// on regroupe les règles dans :pile_compilation
      	bReduce est un booléen = vrai
      	TANTQUE  bReduce 
      		// réduction tant que c'est possible	
      		action_reduce est EActionReduce  =  :_Reduce( )
      		SI en_mode_debug ALORS
      			// trace chaque réduction de la grammaire 
      			dump_pile	est chaine  = :dumpPile()
      			trace_compile_bison( "action="+action_reduce.Nom+ " pile="+dump_pile )
      		FIN			
      
      		selon action_reduce
      			cas EActionReduce.ErreurDeGrammaire
      				// erreur de compilation
      				_erreur_de_syntaxe()
      				renvoyer faux
      			cas EActionReduce.RegroupeRegle 
      				bReduce = vrai // continuer a réduire
      			CAS EActionReduce.PlusDeToken 
      				bReduce = faux // token suivant
      		FIN
      	FIN	//TANTQUE  bReduce 
      	
      
      FIN //BOUCLE infinie
     type : 458752
   -
     name : _Reduce
     procedure_id : 1437297139023367934
     type_code : 12
     code : |1+
      // faire un reduce durant la compilation 
      // cad regrouper de token/règle car ils correspondent a une règle parent
      procédure _Reduce( ) : EActionReduce
      
      taille_pile est un entier = :pile_compilation..Occurrence 
      
      	// indique si on peut réduire la pile pour produire <regle>
      	procédure interne _bRegleReduceOk(regle est RegleDeGrammaire ) : booléen
      		dbgAssertion(regle.nombre_de_paramètre>0)
      		si taille_pile<regle.nombre_de_paramètre ALORS
      			renvoyer faux
      		FIN
      		pour i = 1 a regle.nombre_de_paramètre
      			// si le bas de la pile de correspond pas
      			bas_pile est NiveauPile = pile_compilation[ taille_pile+1-i ]
      			si bas_pile.TOKEN_numero_règle <> regle.tab_indices_token[i] ALORS
      				renvoyer faux				
      			FIN
      		FIN
      		// OK
      		renvoyer vrai		
      	FIN
      
      nombre_de_paramètre_max est entier
      
      // recherche d'une règle reduce
      regle_reduce est RegleDeGrammaire dynamique
      POUR TOUT regle_de_grammaire DE :tab_règle_grammaire
      	// Calcul du max du nb de paramètres possible
      	nombre_de_paramètre_max = max(nombre_de_paramètre_max,regle_de_grammaire.nombre_de_paramètre)
      	
      	// si la règle correpond au bas de la pile
      	si _bRegleReduceOk( regle_de_grammaire ) ALORS
      		regle_reduce = regle_de_grammaire
      		// on stoppe a la 1ere ok
      		sortir
      	FIN
      
      FIN
      
      // si aucun regroupement trouvé
      si regle_reduce=null
      	si :pile_compilation..Occurrence>=nombre_de_paramètre_max ALORS
      		renvoyer EActionReduce.ErreurDeGrammaire // erreur : aucune règle possible
      	FIN
      	RENVOYER EActionReduce.PlusDeToken  // il faut plus de token
      fin
      
      
      ///-------------------------------------------------------			
      /// exécuter  du code user de  regle_reduce
      // + Dépile(  :pile_compilation ,  nbParamètre )
      niveau_courant est NiveauPile
      niveau_courant = _executeCodeUserRegle(regle_reduce)
      
      // maj pile de compilation
      _Empile( niveau_courant)
      SI en_mode_debug ALORS
      	// trace la réduction
      	trace_compile_bison( "REDUCE [%niveau_courant.TOKEN_numero_règle%] pile: " + dumpPile() )
      FIN		
      
       // on a regroupé des règles
      renvoyer EActionReduce.RegroupeRegle
     type : 458752
   -
     name : _calcule_action_token_OBSOLETE
     procedure_id : 1349920938546755514
     type_code : 12
     code : |1+
      // calcul de l'action a effecuter dans la grammaire pour un nouveau token rencontré
      // renvoie
      // .L'action a effectuer
      // .l'indice de regle Reduce si l'action est un Reduce dans :tab_règle_grammaire
      PROCÉDURE _calcule_action_token_OBSOLETE( valeur_token est entier <utile>, pile_avec_token est chaine <utile>, tabActionPossible <utile>) 
      
      // calcul nouvel état avec ce nouveau token
      //taille_pile est entier = ChaîneOccurrence(pile_avec_token,",")-1
      //
      //// résultat
      //résultat est ActionShitReduce 
      //
      //// recherche les règles qui peuvent correspondre
      //nb_reduce_possible	est entier		= 0
      //nb_shift_possible	est entier		= 0
      //i_regle est entier=1 // encours
      //i_dernière_regle_valide est entier=0 // dernière trouve ok
      //POUR TOUT i_regle DE tabActionPossible
      //	soit regle_de_grammaire <- :tab_règle_grammaire[i_regle]
      //	// si c'est exactement cette règle
      //	si regle_de_grammaire.liste_indices_token = pile_avec_token ALORS
      //		// trouvé
      //		résultat.action_token 		 = Reduce
      //		résultat.indice_regle_reduce = i_regle
      //		renvoyer résultat
      //	FIN
      //	// si cette règle est la fin de la pile
      //	si pile_avec_token.finitpar(regle_de_grammaire.liste_indices_token ) ALORS
      //		i_dernière_regle_valide= i_regle
      //		nb_reduce_possible++
      //	FIN
      //	// si cette règle peut être produite avec plus de token
      //	SI regle_de_grammaire.liste_indices_token.CommencePar( pile_avec_token ) ALORS
      //		nb_shift_possible++
      //		info_shift est ShiftPossible
      //		info_shift.indice_regle = i_regle
      //		info_shift.liste_indices_token_restant = milieu( regle_de_grammaire.liste_indices_token, taille(pile_avec_token) )
      //		résultat.tab_shift_possible.Ajoute(info_shift)
      //	FIN	
      //	i_regle++
      //FIN
      //
      //// si 1 seule regle possible
      //si nb_reduce_possible=1 ALORS
      //	résultat.action_token		= Reduce
      //	résultat.indice_regle_reduce = i_regle
      //	RENVOYER  résultat
      //FIN
      //// si plusieurs regles encore possible
      ////SI nb_reduce_possible>1 ALORS
      ////	résultat.action_token		=Shift
      ////	RENVOYER  (Shift,0 )
      ////FIN
      //SI nb_shift_possible>0 ALORS
      //	dbgAssertion(résultat.tab_shift_possible.Occurrence()=nb_shift_possible)
      //	résultat.action_token		=Shift
      //	RENVOYER  résultat
      //FIN
      //
      ////  aucune règle ne peut correspondre
      //// => erreur de grammaire
      //résultat.action_token			= ErrorCompile
      //renvoyer résultat
      
     type : 458752
   -
     name : _executeCodeUserRegle
     procedure_id : 1437298375974499513
     type_code : 12
     code : |1+
      //  exécution du code utilisateur pour un règle de grammaire
      PROCÉDURE  _executeCodeUserRegle(regle_reduce est RegleDeGrammaire dynamique) :  NiveauPile
      // nombre de paramètre
      nbParamètre				est entier						= regle_reduce.nombre_de_paramètre
      // récupération des paramètres dans la pile
      TableauDesParametres	est un tableau de Variant 
      POUR i = 1 _À_ nbParamètre
      	niveau_pile_i est NiveauPile 
      	niveau_pile_i = _Dépile( )
      	TableauDesParametres.Insère(1,niveau_pile_i.valeur_user)
      FIN//I
      // exécution du code
      niveau_courant est NiveauPile
      niveau_courant.TOKEN_numero_règle = regle_reduce.TOKEN_numero_règle
      SELON nbParamètre
      	CAS 1
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1] )			
      	CAS 2
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1], TableauDesParametres[2] )
      	CAS 3
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1], TableauDesParametres[2], TableauDesParametres[3] )
      	CAS 4
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1], TableauDesParametres[2], TableauDesParametres[3], TableauDesParametres[4] )
      	CAS 5
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1], TableauDesParametres[2], TableauDesParametres[3], TableauDesParametres[4], TableauDesParametres[5] )
      	CAS 6
      		regle_reduce.code_a_executer( niveau_courant.valeur_user, TableauDesParametres[1], TableauDesParametres[2], TableauDesParametres[3], TableauDesParametres[4], TableauDesParametres[5], TableauDesParametres[6] )
      	AUTRE CAS
      		dbgAssertion(Faux,"A coder")	
      FIN		
      RENVOYER niveau_courant 
      
     type : 458752
   -
     name : _erreur_de_compilation
     procedure_id : 1349920938546821050
     type_code : 12
     code : |1+
      // lever une erreur de compilation
      procédure _erreur_de_compilation( message_erreur est chaine)
      
      text_ligne_courante	est chaîne
      si m_lexer:numéro_ligne_en_cours <= m_lexer:source_découpée_en_ligne.Occurrence()
       	text_ligne_courante	 = m_lexer:source_découpée_en_ligne[m_lexer:numéro_ligne_en_cours]
       fin
      chaine_restante		est chaîne	= Milieu( text_ligne_courante, m_lexer:numéro_colonne_en_cours)		
      :dernière_erreur = ChaîneConstruit("%1:%2"+rc+ "%3" + rc + "%4" , m_lexer:nom_fichier_source, m_lexer:numéro_ligne_en_cours, text_ligne_courante, message_erreur ) 
     type : 458752
   -
     name : get_texte_erreur
     procedure_id : 1349920938546886586
     type_code : 12
     code : |1+
      // renvoie le texte de la dernière erreur
      procédure get_texte_erreur() : chaîne
      // si on a une erreur de comilation
      si :dernière_erreur<>"" ALORS
      	renvoyer :dernière_erreur
      	
      FIN
      
      // erreur du lexer
      renvoyer m_lexer:dernière_erreur_lex
     type : 458752
   -
     name : dumpPile
     procedure_id : 1440115814397451486
     type_code : 12
     code : |1-
      // renvoie un dump de la pile pour debug
      procédure dumpPile() : chaine
      
      dump_pile est chaine 
      
      niveau_pile est NiveauPile
      POUR TOUT niveau_pile  de :pile_compilation
      	nom_regle est chaine =  :debug_token_int_vers_nom[niveau_pile.TOKEN_numero_règle] 
      	dump_pile += [","] + nom_regle + "(" +  niveau_pile.TOKEN_numero_règle + ")"
      FIN
      renvoyer dump_pile
     type : 458752
   -
     name : trace_compile_bison
     procedure_id : 1418600386185816433
     type_code : 12
     code : |1+
      PROCÉDURE trace_compile_bison( texte est chaine)
      
      SI  :en_mode_debug ALORS
      	Trace("[bison] " + texte)
      FIN
      
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : Classe1
resources :
 string_res :
  identifier : 0x12ba8dc50078330e
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
