#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : gestion_ligne_de_commande
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x138c5b73007ca17f
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1-
      exit_code est un entier
      
      constant
      	EXIT_CODE_OK    = 0
      	EXIT_CODE_ERROR = 1
      FIN
      STOptions_lc est une structure
      	debug		est un booléen	
      	verbose		est un booléen	// -verbose
      	newprojet	est un booléen	// -newproject
      fin
      
      // options de la ligne de commande
      constant
      	LC_Verbose		 =	"-verbose"
      	LC_Debug  		 =	"-debug" 
      	LC_CreeProject  =  "-newproject"
      fin
     type : 720896
   -
     code : |1-
      
     type : 720898
  procedures :
   -
     name : get_exit_code
     procedure_id : 1409304754113194371
     type_code : 15
     code : |1-
      procédure get_exit_code()
      renvoyer exit_code
     type : 458752
   -
     name : en_mode_ligne_de_commande
     procedure_id : 1408603364467988822
     type_code : 15
     code : |1-
      procédure en_mode_ligne_de_commande()
      si ProjetInfo(piConfiguration)="Ligne de commande" alors
      	renvoyer vrai
      FIN
      // autre
      renvoyer faux
     type : 458752
   -
     name : genere_compilateur
     procedure_id : 1408601509041357645
     type_code : 15
     code : |1+
      // point d'entree pour la génération par ligne de commande
      procédure genere_compilateur()
      
      si LigneCommande()="" ALORS
      	_erreur_LC()
      	RETOUR
      FIN
      
      
      // décodage de la ligne de commande
      option est STOptions_lc
      i est entier= 4
      options_lc est chaine =  LigneCommande(i++)
      tantque options_lc<>""
      	seLon options_lc 
      		CAS LC_Verbose
      			option.verbose= vrai
      		CAS LC_DEbug
      			option.debug= vrai
      		cas LC_CreeProject
      			option.newprojet = vrai
      		autre cas
      			// option iconnu
      			_erreur_LC("options invalides : " + options_lc)
      			retour			
      	fin	
      	// option suivante
      	options_lc =  LigneCommande(i++)
      FIN
      
      fichier_source_l	est chaine		= LigneCommande(1)
      fichier_source_y	est chaine		= LigneCommande(2)
      fichier_dest		est chaine		= LigneCommande(3)
      // exécution
      exit_code = _genere_compilateur(fichier_source_l,fichier_source_y,fichier_dest,option)
      
     type : 458752
   -
     name : _erreur_LC
     procedure_id : 1408601753854550127
     type_code : 15
     code : |1+
      // apppel si pb avec la ligne de comamnde
      // afficher l'aide et sortir.
      procédure _erreur_LC(message_suppl est chaine="")
      
      message_d_erreur est chaine = [
      usage  :  wd_flex_bison <source.l> <source.y> <destination full path> [otions]
      option 
      	-verbose : trace out a lot of info about how the compilater is generated
      	-debug : generate a compiler with debug info and source code from source.l/source.y
      	-newproject : generate a complete projet
      	
      exemple :
      wd_flex_bison calc.l calc.y "C:\Temp\out_flex\mon_compilateur\calc.wd" -debug -newproject
      ]
      si message_suppl<>"" ALORS
      	trace_console(message_suppl)
      FIN
      trace_console(message_d_erreur)
      exit_code= EXIT_CODE_ERROR
     type : 458752
   -
     name : _genere_compilateur
     procedure_id : 1408603789669981730
     type_code : 15
     code : |1+
      procédure _genere_compilateur(fichier_source_l	est chaîne, fichier_source_y, fichier_dest est chaîne, option est STOptions_lc )
      
      
      fichier_dest_lex	est chaîne	= fExtraitChemin(fichier_dest,fDisque+fRépertoire+fFichier)+"_lex" + fExtraitChemin(fichier_dest,fExtension)
      
      // crée un compilateur de grammaires
      compilateurBison  est un wdBison
      // init options
      compilateurBison.en_mode_verbose     = option.verbose
      compilateurBison.dest_en_mode_debug  = option.debug
      compilateurBison.dest_projet_complet = option.newprojet
      
      soit (b,message_d_erreur) = compilateurBison.génère_compilateur(fichier_source_l,fichier_source_y, fichier_dest)
      SI PAS b ALORS
      	trace_console( message_d_erreur )
      	renvoyer EXIT_CODE_ERROR
      	
      FIN
      
      // Succès de la compilation
      trace_console(ChaîneConstruit("'%1' a été généré avec succès." , fichier_dest))
      RENVOYER EXIT_CODE_OK
     type : 458752
   -
     name : trace_console
     procedure_id : 1409306579477276247
     type_code : 15
     code : |1+
      // afficher un texte dans le console de sortie standard
      procédure trace_console(  texte est chaine )
      
      texteU est chaine UNICODE = texte
      dbgSortieStandard( texteU  )
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : ProcéduresGlobales1
resources :
 string_res :
  identifier : 0x138c5b55007a2f5d
  internal_properties : CAAAAAgAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
