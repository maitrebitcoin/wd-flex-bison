#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wdBison
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x12b2a785001d1d06
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1-
      wdBison est une Classe
      	hérite de wd_lexer_base
      	
      	// Remplis durant la phase de compilation
      	règle_en_cours est RegleDeGrammaire dynamique
      	
      	// code utilisateur a mettre dans la déclaration de la classe pour ajouter des membre
      	code_wl_declaration			est chaine unicode
      	// règles de productions trouvée dans le .y
      	tab_règle_grammaire	est un tableau de RegleDeGrammaire	
      fin
      // Ex:  A ->     A b
      //            |  c
      RegleDeGrammaire est une structure
      	Nom est chaine 
      	// sous règles possible pour produire un 
      	tableau_regle est un tableau de chaînes
      	// code WL a produire
      	code_wl		est chaine
      fin
      EEtat est un enumeration
      	Tout_Etat					= 1 
      	Declaration_SymboleEtOption	= 2
      	Declaration_CodeUser		= 3 // entre [% et %]
      	Avant_Règles				= 4
      	Declaration_Règles			= 5 // entre  %% et %% final
      	Apres_Règles				= 6 // après le %% final
      	
      	
      FIN
      constant  SYNTAX_ERROR_MISSING_TOKEN = "Erreur de syntaxe, il manque un '%1'."
      
      CONSTANT TOKEN_EOF  = -1 // fin de fichier
      CONSTANT TOKEN_NONE = 0  // aucun token valide
      EActionSurToken est une énumération
      	Shift			= 1 // lire le token suivant
      	Reduce			= 2 // regroupe les token
      	EndCompile		= 3 // fin de la compilation
      	ErrorCompile	= 4 // lever un erreur de grammamire
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1347323428211662086
     type_code : 27
     code : |1+
      procédure Constructeur()
      
      // Init un tableau a 7 él&ments vide
      :tableau_regle = allouer un tableau de 7 tableaux de wd_lexer_base::RegleDeProductionLex
      // Init des règles de parsing pour produire le lexer
      _ajoute_règle_production_lex(Declaration_SymboleEtOption,  "%{","",     (yyText)=>{ _changeState(Declaration_CodeUser) } )
      _ajoute_règle_production_lex(Declaration_SymboleEtOption,  "",".*",     (yyText)=>{ } ) // pas d'options pour l'instant, on ignore tout
      _ajoute_règle_production_lex(Declaration_CodeUser, 		   "%}","",     (yyText)=>{ _changeState(Avant_Règles) } )
      _ajoute_règle_production_lex(Declaration_CodeUser, 		   "",".*",     (yyText)=>{ :code_wl_declaration += [RC] + yyText } )
      _ajoute_règle_production_lex(Declaration_SymboleEtOption,  "%%","",     (yyText)=>{ _changeState(Declaration_Règles) } )
      _ajoute_règle_production_lex(Avant_Règles, 	 	  		   "%%","",     (yyText)=>{ _changeState(Declaration_Règles) } )
      _ajoute_règle_production_lex(Declaration_Règles, 		   "%%","",     (yyText)=>{ _changeState(Apres_Règles) }  )
      _ajoute_règle_production_lex(Declaration_Règles,  		   "",".*",     (yyText)=>{ _parse_ligne_regle_bison(yyText)  } )
      _ajoute_règle_production_lex(Tout_Etat, 		  		   "","",       (yyText)=>{ } ) // ignorer les lignes vides
      _ajoute_règle_production_lex(Tout_Etat, 		  		   "","[ \t]*", (yyText)=>{ } ) // ignorer les lignes avec que des espaces ou tab
     type : 589824
   -
     name : _changeState
     procedure_id : 1348427754499041265
     type_code : 12
     code : |1-
      procédure  _changeState( e EEtat )
      	:etat_courant_lexer = e.Valeur
     type : 458752
   -
     name : Destructeur
     procedure_id : 1347323428211727622
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : _parse_ligne_regle_bison
     procedure_id : 1348056261301673528
     type_code : 12
     code : |1+
      // Analyser une règle de grammaire
      // Ex
      // expression: T_INT				{ $$ = $1; }
      //			 | expression T_PLUS expression	{ $$ = $1 + $3; }
      //;
      procédure _parse_ligne_regle_bison( ligne_règle_grammaire est chaine)
      
      si ligne_règle_grammaire="" retour
      
      // ";" marque une fin de regle
      si SansEspace(ligne_règle_grammaire)=";" alors
      	_fin_de_regle()
      	retour
      FIN
      
      // si c'est la 1ere ligne de déclaration
      suite_ligne est chaine
      SI regle_en_cours=Null ALORS
      	// init
      	regle_en_cours = allouer une RegleDeGrammaire
      	
      	// extrait le nom avant le :
      	postion_deux_point est un entier = ligne_règle_grammaire.Position(":")
      	si postion_deux_point<=0 ALORS
      		_erreur( ChaîneConstruit( SYNTAX_ERROR_MISSING_TOKEN, ":") )
      		retour
      	FIN
      	règle_en_cours.Nom = ligne_règle_grammaire.gauche(postion_deux_point-1)
      	suite_ligne        = ligne_règle_grammaire.Milieu(postion_deux_point+1)
      sinon
      	// on recherche | 
      	postion_ou est un entier = ligne_règle_grammaire.Position("|")
      	SI postion_ou<=0 ALORS
      		_erreur( ChaîneConstruit( SYNTAX_ERROR_MISSING_TOKEN, "|" )  )
      		RETOUR
      	FIN
      	suite_ligne        = ligne_règle_grammaire.Milieu(postion_ou+1)	
      FIN
      
      // analyse des regles : 
      // ex: "expression T_PLUS expression 	{ $$ = $1 + $3; }"
      code_wl_user est chaine 
      regles_separee_par_espace est chaine 
      (regles_separee_par_espace,code_wl_user) = _extrait_code_utilisateur(suite_ligne)
      
      suite_ligne = Remplace(suite_ligne, TAB, " ")
      suite_ligne= SansEspace(suite_ligne)
      POUR TOUTE CHAÎNE token_ou_regle DE regles_separee_par_espace separée par " "
      	règle_en_cours.tableau_regle.Ajoute(token_ou_regle)
      FIN
      
     type : 458752
   -
     name : _extrait_code_utilisateur
     procedure_id : 1348065280733259854
     type_code : 12
     code : |1+
      // découpe la partie droite d'une ligne en <règles>,<code wl>
      // ex:  "expression T_PLUS expression 	{ $$ = $1 + $3; }" => ("expression T_PLUS expression","$$ = $1 + $3;")
      procédure _extrait_code_utilisateur( suite_ligne  chaine) : (chaine, chaine)
      
      suite_ligne	= Remplace(suite_ligne, TAB, " ")
      suite_ligne	= SansEspace(suite_ligne)
      
      // recherche is le code est présent
      position_accolade est un entier = suite_ligne.Position("{")
      regles_separee_par_espace	est chaine		
      code_wl_user				est chaine	
      si position_accolade>0 ALORS
      	regles_separee_par_espace = suite_ligne.Gauche(position_accolade-1)
      	code_wl_user			  = suite_ligne.Milieu(position_accolade+1)
      sinon
      	regles_separee_par_espace = suite_ligne
      FIN
      
      // si il a des commentaires de fin de ligne, on les enlève
      position_marque_commentaire	est un entier	= code_wl_user.position("//")
      SI 	position_marque_commentaire>0 ALORS
      	code_wl_user = Gauche(code_wl_user, position_marque_commentaire-1)	
      FIN
      // pas d'espace
      code_wl_user = SansEspace(code_wl_user,sscExtérieur)
      regles_separee_par_espace = SansEspace(regles_separee_par_espace,sscExtérieur)
      // "," tout seul est invalide en WL
      si (code_wl_user=";") code_wl_user= ""
      
      // enlever les {} autour du code 
      SI code_wl_user<>"" alors
      	SI code_wl_user.Droite(1)="}" ALORS
      		code_wl_user = Milieu(code_wl_user,2,Taille(code_wl_user)-2)
      	sinon
      		_erreur( ChaîneConstruit(SYNTAX_ERROR_MISSING_TOKEN, "}") )
      	FIN
      fin
      
      renvoyer (regles_separee_par_espace,code_wl_user)
     type : 458752
   -
     name : _fin_de_regle
     procedure_id : 1348057322158645907
     type_code : 12
     code : |1+
      procédure _fin_de_regle()
      
      // si on a un regle on l'ajoute au tableau des regles
      si regle_en_cours<>null ALORS
      	tab_règle_grammaire.Ajoute( regle_en_cours )
      FIN
      
      règle_en_cours = Null
      
     type : 458752
   -
     name : génère_compilateur
     procedure_id : 1348426779541106813
     type_code : 12
     code : |1+
      // génération d'une classe WL sur le disque
      // renvoie (vrai,"") ou (faux,<message d'erreur>)
      PROCÉDURE génère_compilateur(nom_fichier_source_bison est chaine, nom_fichier_dest est chaine) : (booléen, chaine)
      
      // chargement du fichier .l
      source_lexer est chaine UNICODE = charge_fichier_source(nom_fichier_source_bison)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      
      // init a l'état initial
      _changeState(Declaration_SymboleEtOption)
      // compilation avec le mode spécial ligne a ligne
      soit (ok,message_erreur) = _compile_mode_ligne(source_lexer)
      SI PAS ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      
      fSauveTexte(nom_fichier_dest,"OK")
      
      //OK
      renvoyer (vrai,"")
     type : 458752
   -
     name : compile_chaine
     procedure_id : 1348994595692411864
     type_code : 12
     code : |1+
      procédure compile_chaine( source_a_compiler est chaine UNICODE)
      
      
      // Init lexer
      lexer est un wd_lexer_base
      lexer.set_source(source_a_compiler)
      procédure interne __donne_token_suivant() :wd_lexer_base::STToken
      		
      	résutat est un wd_lexer_base::STToken
      	regle_lexer est  wd_lexer_base::RegleAExécuter <-  lexer._donne_token_suivant()
      	résutat.valeur_chaine = regle_lexer.token
      	résutat.règle		  = regle_lexer.règle
      	//^TODO
      	résutat.valeur = TOKEN_EOF
      	renvoyer résutat
      fin
      
      
      BOUCLE
      	// récupération du token suivant
      	token_courant est wd_lexer_base::STToken  <- __donne_token_suivant()
      	// si c'est la fin du fichier
      	SI token_courant.valeur = TOKEN_EOF  ALORS
      		// erreur de la compilation
      		_erreur("Fin de fichier innatendue")
      	FIN
      	// si on a trouvé aucune règle de production valide
      	SI token_courant.valeur = TOKEN_NONE ALORS
      		// erreur de compilation
      		text_ligne_courante	est chaîne	= :source_découpée_en_ligne[:numéro_ligne_en_cours]
      		chaine_restante		est chaîne	= Milieu( text_ligne_courante, :numéro_colonne_en_cours)		
      		m_sErreur = ChaîneConstruit( <§R12b8980e003465d3¤fr-FR¤Erreur de syntaxe a ligne %1.\n**%2** est une suite de caractères invalide.§>, numéro_ligne_en_cours, chaine_restante ) 
      		RENVOYER (Faux, m_sErreur)
      	FIN
      	SI en_mode_debug ALORS
      		// trace chaque token
      		Trace( token_courant.règle.numero_regle + ":" + :etat_courant_lexer+ ":"   + token_courant.valeur_chaine + TAB + numéro_ligne_en_cours)
      	FIN	
      	// on calcule ce qu'on doit faire avec ce token
      	action_token est EActionSurToken = _calcule_action_token(token_courant)
      
      	
      FIN
     type : 458752
   -
     name : _calcule_action_token
     procedure_id : 1349000531338203752
     type_code : 12
     code : |1+
      PROCÉDURE _calcule_action_token(tok est wd_lexer_base::STToken) : EActionSurToken
      
      si tok.Valeur = TOKEN_EOF ALORS
      	renvoyer ErrorCompile
      FIN
      
      // calcul nouvel état avec ce nouveau token
      m_pile est buffer//@TEMP
      pile_avec_token est un buffer = m_pile + asc(tok.valeur)
      
      // recherche les règles qui peuvent correspondre
      nombre_regle_possible est entier = 0
      POUR TOUT regle_de_grammaire DE tab_règle_grammaire
      	POUR TOUT regle_simple DE regle_de_grammaire.tableau_regle
      		// si c'est exactement cette regle
      		//si regle_simple.b
      		
      	fin
      FIN
      
      
      RENVOYER Shift
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x12b2a779001aef01
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
