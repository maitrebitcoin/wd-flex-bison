#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wdBison
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x12b2a785001d1d06
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      wdBison est une Classe
      	hérite de wdFlexBisonBase
      	
      	// Remplis durant la phase de compilation
      	règle_en_cours				est RegleDeGrammaireSource dynamique
      	
      	// code utilisateur a mettre dans la déclaration de la classe pour ajouter des membre
      	code_wl_declaration_membre	est chaine unicode
      	// règles de productions trouvée dans le .y
      	tab_règle_grammaire_source	est un tableau de RegleDeGrammaireSource	
      	// token => valeur a déclarer au lexer
      	token_int_vers_nom			est un tableau associatif de chaine
      	token_nom_vers_int			est un tableau associatif d'entier
      	indice_token_pour_déclation est entier
      	// code a mettre dans l'init pour déclarer les règles. 
      	// remplacera CODE_INIT_GRAMMAIRE
      	code_wl_init				est chaîne UNICODE	
      	// options déclarées par %xxx. ex: "%start calcul". clé = nom de l'option en minuscules
      	tab_options					est un tableau associatif de chaine
      	// option : 
      	//générer un projet complet (plutot que juste des fichiers .wdc et dépendances )
      	dest_projet_complet			est un booléen
      	//générer un composant interne (si il n'existe pas encore)
      	dest_ci_siInexistant		est un booléen
      	// fichier de test a utiliser pour le cas d'un projet complet
      	fichier_de_test				est chaine
      	
      fin
      // Ex:  A ->     A b
      //            |  c
      RegleDeGrammaireSource est une structure
      	Nom				est chaine 
      	// chaque règle pouvant nous produire
      	tableau_element_regle est un tableau de ElementRegle
      	// indice de la règle 
      	Indice      	est entier
      	// indique si terminale = racine de l'arbre ou %start explicite
      	bRacine 	    est un booléen
      fin
      ElementRegle est une structure
      	// sous règles possible pour produire A. ex: "nombre '+' nombre"
      	tableau_sous_element_regle est un tableau de SousElementRegle
      	// code WL a produire
      	code_wl			est chaine	
      	// n° de ligne source
      	ligne_source    est un entier
      fin
      SousElementRegle est une structure
      	// ex: "nombre" ou "+"
      	Nom				est chaine 
      	// indice de la règle ou du token
      	indice			est entier
      FIN
      
      EEtat est un enumeration
      	Tout_Etat					= 1 
      	Declaration_SymboleEtOption	= 2
      	Declaration_CodeUser		= 3 // entre [% et %]
      	Declaration_Règles			= 5 // entre  %% et %% final
      	Apres_Règles				= 6 // après le %% final
      	
      	
      FIN
      constant  
      	SYNTAX_ERROR_MISSING_TOKEN = "Erreur de syntaxe, il manque un '%1'."
      	ERR_BISON_NO_RULE		   = "Aucune règle de grammaire trouvé."
      	ERR_UNKNOWN_RULE		   = "règle ou token invalide : %1"
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1347323428211662086
     type_code : 27
     code : |1+
      procédure Constructeur()
      
      // Init un tableau a 7 él&ments vide
      :tableau_regle = allouer un tableau de 7 tableaux de wd_lexer_base::RegleDeProductionLex
      // Init des règles de parsing pour produire le lexer
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "%{","",     (yyText)=>{ _changeState(Declaration_CodeUser) } )
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "%%","",     (yyText)=>{ _changeState(Declaration_Règles) } )
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "",".*",     (yyText)=>{ _parse_ligne_option(yytext)} ) // pas d'options pour l'instant, on ignore tout
      _ajoute_règle_BisonnFlex(Declaration_CodeUser, 		   "%}","",     (yyText)=>{ _changeState(Declaration_SymboleEtOption) } )
      _ajoute_règle_BisonnFlex(Declaration_CodeUser, 		   "",".*",     (yyText)=>{ :code_wl_declaration_membre += [RC] + yyText } )
      _ajoute_règle_BisonnFlex(Declaration_Règles, 		   "%%","",     (yyText)=>{ _changeState(Apres_Règles) }  )
      _ajoute_règle_BisonnFlex(Declaration_Règles,  		   "",".*",     (yyText)=>{ _parse_ligne_regle_bison(yyText)  } )
      _ajoute_règle_BisonnFlex(Tout_Etat, 		  		   "","",       (yyText)=>{ } ) // ignorer les lignes vides
      _ajoute_règle_BisonnFlex(Tout_Etat, 		  		   "","[ \t]*", (yyText)=>{ } ) // ignorer les lignes avec que des espaces ou tab
     type : 589824
   -
     name : _changeState
     procedure_id : 1348427754499041265
     type_code : 12
     code : |1-
      procédure  _changeState( e EEtat )
      
      si :etat_courant_lexer = Declaration_Règles.Valeur ALORS
      	_fin_de_regle()
      FIN
      
      :etat_courant_lexer = e.Valeur
     type : 458752
   -
     name : Destructeur
     procedure_id : 1347323428211727622
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : _parse_ligne_option
     procedure_id : 1351447305486574048
     type_code : 12
     code : |1+
      // analyse d'une de lignes option.
      //ex:
      //%token T_NEWLINE T_QUIT
      procédure _parse_ligne_option(ligne_option est chaine)
      
      
      procédure interne _déclareToken(nom)
      	:token_int_vers_nom[indice_token_pour_déclation ] = nom
      	:token_nom_vers_int[nom ] = indice_token_pour_déclation
      	indice_token_pour_déclation ++
      fin
      
      // gestion de %token
      si ChaîneCommencePar(ligne_option,"%token ") ALORS
      	suite_ligne_option est chaine = milieu(ligne_option,8)
      	suite_ligne_option=Remplace(suite_ligne_option,tab, " ") // TAB et " " traités de façon identiques
      	nom_token est chaine
      	POUR TOUTE CHAÎNE nom_token DE suite_ligne_option SÉPARÉE PAR " "
      		_déclareToken(nom_token)
      	FIN
      	
      FIN
      
      // gestion de %xxxx (générique)
      //ex: "%start calcul"
      SI ChaîneCommencePar(ligne_option,"%") ALORS
      	nom_option est chaine
      	valeur_otion est chaine
      	si RegexVérifie(ligne_option,"%([a-z]*)[\t\ ]*(.*)", nom_option,  valeur_otion) ALORS
      		tab_options[nom_option] = valeur_otion
      	FIN
      	
      	
      FIN
     type : 458752
   -
     name : _parse_ligne_regle_bison
     procedure_id : 1348056261301673528
     type_code : 12
     code : |1-
      // Analyser une règle de grammaire
      // Ex
      // expression: T_INT				{ $$ = $1; }
      //			 | expression T_PLUS expression	{ $$ = $1 + $3; }
      //;
      procédure _parse_ligne_regle_bison( ligne_règle_grammaire est chaine)
      
      
      // ";" marque une fin de regle
      si SansEspace(ligne_règle_grammaire)=";" alors
      	_fin_de_regle()
      	retour
      FIN
      // on accepte une ligne vide aussi
      SI SansEspace(ligne_règle_grammaire)="" ALORS
      	_fin_de_regle()
      	RETOUR
      FIN
      
      // suppimer les commentaires en fin de ligne
      ligne_règle_grammaire = _supprime_commentaire( ligne_règle_grammaire )
      si SansEspace(ligne_règle_grammaire)="" ALORS
      	retour // commentaire uniquement sur la ligne on ignore
      FIN
      
      // si ca fini par ";"
      bFiniParPoitnVirgule est un booléen = Droite(ligne_règle_grammaire,1)=";"
      SI  bFiniParPoitnVirgule ALORS
      	// enlever le ";"
      	ligne_règle_grammaire	= Milieu(ligne_règle_grammaire,1,Taille(ligne_règle_grammaire)-1)
      FIN
      
      // si c'est la 1ere ligne de déclaration
      suite_ligne est chaine
      SI regle_en_cours=Null ALORS
      	// init
      	regle_en_cours = allouer une RegleDeGrammaireSource
      	
      	// extrait le nom avant le :
      	postion_deux_point est un entier = ligne_règle_grammaire.Position(":")
      	si postion_deux_point<=0 ALORS
      		_erreur_exception( ChaîneConstruit( SYNTAX_ERROR_MISSING_TOKEN, ":") )
      		retour
      	FIN
      	règle_en_cours.Nom = ligne_règle_grammaire.gauche(postion_deux_point-1)
      	suite_ligne        = ligne_règle_grammaire.Milieu(postion_deux_point+1)
      sinon
      	// on recherche | 
      	postion_ou est un entier = ligne_règle_grammaire.Position("|")
      	SI postion_ou<=0 ALORS
      		_erreur_exception( ChaîneConstruit( SYNTAX_ERROR_MISSING_TOKEN, "| ou ;" )  )
      		RETOUR
      	FIN
      	suite_ligne        = ligne_règle_grammaire.Milieu(postion_ou+1)	
      FIN
      
      element_règle_en_cours	est ElementRegle 
      
      // analyse des regles : 
      // ex: "expression T_PLUS expression 	{ $$ = $1 + $3; }"
      code_wl_user est chaine 
      regles_separee_par_espace est chaine 
      (regles_separee_par_espace,code_wl_user) = _extrait_code_utilisateur(suite_ligne)
      element_règle_en_cours.code_wl = code_wl_user
      element_règle_en_cours.ligne_source = :numéro_ligne_en_cours
      
      suite_ligne = Remplace(suite_ligne, TAB, " ")
      suite_ligne= SansEspace(suite_ligne)
      // si vide on ajoute rien
      si suite_ligne="" ALORS
      	retour
      FIN
      
      
      POUR TOUTE CHAÎNE token_ou_regle DE regles_separee_par_espace separée par " "
      	sous_elemeent est  SousElementRegle 
      	sous_elemeent.Nom = token_ou_regle
      	element_règle_en_cours.tableau_sous_element_regle.Ajoute(sous_elemeent)
      FIN
      règle_en_cours.tableau_element_regle.Ajoute(element_règle_en_cours)
      
      SI bFiniParPoitnVirgule ALORS
      	_fin_de_regle()
      FIN
     type : 458752
   -
     name : _extrait_code_utilisateur
     procedure_id : 1348065280733259854
     type_code : 12
     code : |1+
      // découpe la partie droite d'une ligne en <règles>,<code wl>
      // ex:  "expression T_PLUS expression 	{ $$ = $1 + $3; }" => ("expression T_PLUS expression","$$ = $1 + $3;")
      procédure _extrait_code_utilisateur( suite_ligne  chaine) : (chaine, chaine)
      
      suite_ligne	= Remplace(suite_ligne, TAB, " ")
      suite_ligne	= SansEspace(suite_ligne)
      
      // recherche is le code est présent
      position_accolade est un entier = suite_ligne.Position("{")
      regles_separee_par_espace	est chaine		
      code_wl_user				est chaine	
      si position_accolade>0 ALORS
      	regles_separee_par_espace = suite_ligne.Gauche(position_accolade-1)
      	code_wl_user			  = suite_ligne.Milieu(position_accolade+1)
      sinon
      	regles_separee_par_espace = suite_ligne
      FIN
      
      // si il a des commentaires de fin de ligne, on les enlève
      position_marque_commentaire	est un entier	= code_wl_user.position("//")
      SI 	position_marque_commentaire>0 ALORS
      	code_wl_user = Gauche(code_wl_user, position_marque_commentaire-1)	
      FIN
      // pas d'espace
      code_wl_user = SansEspace(code_wl_user,sscExtérieur)
      regles_separee_par_espace = SansEspace(regles_separee_par_espace,sscExtérieur)
      // "," tout seul est invalide en WL
      si (code_wl_user=";") code_wl_user= ""
      
      // enlever les {} autour du code 
      SI code_wl_user<>"" alors
      	SI code_wl_user.Droite(1)="}" ALORS
      		code_wl_user = Milieu(code_wl_user,1,Taille(code_wl_user)-1)
      	sinon
      		_erreur_exception( ChaîneConstruit(SYNTAX_ERROR_MISSING_TOKEN, "}") )
      	FIN
      fin
      
      renvoyer (regles_separee_par_espace,code_wl_user)
     type : 458752
   -
     name : _fin_de_regle
     procedure_id : 1348057322158645907
     type_code : 12
     code : |1+
      procédure _fin_de_regle()
      
      // si on a un regle on l'ajoute au tableau des regles
      si regle_en_cours<>null ALORS
      	tab_règle_grammaire_source.Ajoute( regle_en_cours )
      FIN
      
      règle_en_cours = Null
      
     type : 458752
   -
     name : _parse_grammaire
     procedure_id : 1350679575801374233
     type_code : 12
     code : |1+
      // analyser le fichier .y
      // lance un exception en cas d'erreur
      procédure _parse_grammaire(nom_fichier_source_bison est chaine) 
      
      :nom_fichier_source = nom_fichier_source_bison // pour les erreur
      trace_mode_verbose(:en_mode_verbose,"Analyse de " +  nom_fichier_source_bison )
      // chargement du fichier .y
      source_bison est chaine UNICODE = charge_fichier_source(nom_fichier_source_bison)
      SI ErreurDétectée ALORS
      	// erreur
      	_erreur_exception ( ErreurInfo())
      FIN
      // vérification de syntaxe basique
      si position(source_bison,"%%")<=0 ALORS
      	_erreur_exception ( ChaîneConstruit(SYNTAX_ERROR_MISSING_TOKEN, "%%" ) )
      FIN
      
      // init a l'état initial
      _changeState(Declaration_SymboleEtOption)
      :indice_token_pour_déclation = 256
      // compilation avec le mode spécial ligne a ligne
      compile_mode_ligne(source_bison)
      
      // si aucune règle trouvée
      si tab_règle_grammaire_source.Occurrence()=0 ALORS
      	_erreur_exception (ERR_BISON_NO_RULE)
      FIN
      
      // OK
      
     type : 458752
   -
     name : _recherche_indice_par_nom
     procedure_id : 1356087918866089603
     type_code : 12
     code : |1-
      // renvoie l'indice a utiliser selon le nom de token, regle ou littéral comme '+'
      procédure _recherche_indice_par_nom( nom chaine ansi ) : entier
      
      // cas littéral
      si  nom[1]="'" _et_ nom[3]="'" _et_ taille( nom)=3 ALORS
      	renvoyer asc(nom[2])
      FIN
      
      // cas token
      si :token_nom_vers_int[nom].existe ALORS
      	renvoyer :token_nom_vers_int[nom]
      FIN
      
      // cas règle de grammaire
      POUR TOUT regle_source de tab_règle_grammaire_source
      	si regle_source.Nom = nom ALORS
      		renvoyer regle_source.Indice
      	FIN
      FIN
      
      // pas trouvé 
      renvoyer -1
       
     type : 458752
   -
     name : _génere_structure_grammaire
     procedure_id : 1351446382068455741
     type_code : 12
     code : |1+
      // génère les donnée de 
      // tab_règle_grammaire	est un tableau de RegleDeGrammaire	
      
      procédure _génere_structure_grammaire()
      
      :code_wl_init  = "" 
      
      //regle_source est RegleDeGrammaireSource
      indice_règle	est entier	= :indice_token_pour_déclation+ 1
      indice_1er_règle est entier = indice_règle
      //1- numéroter toutes les règles
      POUR TOUT regle_source de tab_règle_grammaire_source
      	regle_source.indice = indice_règle
      	indice_règle++	
      FIN
      //2-numéroter toutes les sous règles
      POUR TOUT regle_source de tab_règle_grammaire_source
      	POUR TOUT element_regle de regle_source.tableau_element_regle	
      		POUR TOUT sous_element_regle DE element_regle.tableau_sous_element_regle
      			// on recherche l'indice
      			indice_regle_ou_token est entier = _recherche_indice_par_nom( sous_element_regle.Nom )
      			
      			si indice_regle_ou_token=-1
      				// pas trouvé : erreur
      				 :numéro_ligne_en_cours = element_regle.ligne_source // pour être positionné sur la bonne ligne
      				_erreur_exception(  ChaîneConstruit(ERR_UNKNOWN_RULE, sous_element_regle.Nom))
      			fin
      			
      			sous_element_regle.indice = indice_regle_ou_token
      		FIN
      	FIN
      FIN
      //.3 trouve la règles racine
      // si %start est précise on l'utilise, sinon on prend la 1er règle rencontrée
      //inspiré de https://www.gnu.org/software/bison/manual/html_node/Start-Decl.html
      si :tab_options["start"].existe ALORS
      	nom_règlè_start est chaine = :tab_options["start"]
      	POUR TOUT regle_source de tab_règle_grammaire_source
      		regle_source.bRacine =  (regle_source.nom = nom_règlè_start )
      	fin
      sinon
      	// la 1ere regle
      	POUR TOUT regle_source de tab_règle_grammaire_source
      		regle_source.bRacine = (regle_source.indice =  indice_1er_règle )
      	FIN
      fin
      
      
      //3- calculer le code WL a mettre dans la classe destination
      pour tout regle_source de tab_règle_grammaire_source
      		
      	// pour tous les cas qui valident cette règle
      	// ex "nombre '+' nombre"
      	POUR tout element_regle de regle_source.tableau_element_regle	
      		
      		// code a a exécuter 
      		code_wl_source est chaine = element_regle.code_wl
      	
      		// construire les règles a suivre
      		// ex: "256,258,256"
      		regle_possible_format_chaine est chaine=""
      		sous_element_regle est SousElementRegle
      		POUR TOUT sous_element_regle de element_regle.tableau_sous_element_regle
      			regle_possible_format_chaine += [","] + sous_element_regle.indice
      		FIN
      		// si c'est une règle terminale il faut arriver a la fin du flux
      		// CONSTANT TOKEN_EOF   = 0 // fin de fichier
      		si regle_source.bRacine ALORS
      			regle_possible_format_chaine += [","] + "0"
      		FIN
      		
      		// code exécuté a chaque réduction
      		// remplacer $$ et $1, $2, etc
      		code_wl_source = Remplace(code_wl_source,"$$","_RETOUR")
      		numero_parametre est entier =1
      		code_pararmètre est chaine
      		POUR TOUT sous_element_regle DE element_regle.tableau_sous_element_regle
      			nom_paramètre est chaine = "_P"+numero_parametre // ex : "_P1"
      			code_pararmètre += [","] + nom_paramètre
      			code_wl_source = Remplace(code_wl_source,"$"+numero_parametre,nom_paramètre)
      			numero_parametre++
      		FIN
      		// on vérifie si il n'y en a pas en trop
      		pour i = element_regle.tableau_sous_element_regle.Occurrence()+1 a 9 
      			si position( code_wl_source, "$"+ i) > 0 ALORS
      				:numéro_ligne_en_cours = element_regle.ligne_source
      				_erreur_exception("paramètres invalide :" + "$" + i)
      			FIN
      		FIN
      	 
      		code_wl_gestion_regle est chaine =  ChaîneConstruit( "(_RETOUR,%1)=>{%2}" , code_pararmètre, code_wl_source )
      		
      		// ex : _ajoute_regle_grammaire(1,"addition","+", ""  )
      		code_init_une_règle est chaine
      		code_init_une_règle = ChaîneConstruit("_ajoute_regle_grammaire(%1,""%2"",""%3"", %4)", regle_source.Indice, regle_source.Nom, regle_possible_format_chaine, code_wl_gestion_regle  )
      		// ajout de toutes les règles
      		:code_wl_init += [RC] + code_init_une_règle
      
      	fin
      
      
      FIN
     type : 458752
   -
     name : _genère_code_bison_apres_compilation
     procedure_id : 1352147977867092570
     type_code : 12
     code : |1-
      procédure _genère_code_bison_apres_compilation(nom_classe_principale_générée est chaîne ANSI, nom_classe_lex_générée est chaine ansi) :  (booléen, chaîne ANSI, chaîne)
      
      // chargement du code  wl template
      template_code est chaîne ANSI = charge_ressource_classe("modele_compilateur_genere.wdc")
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, "", ErreurInfo())
      FIN
      
      // Modifier le nom de la classe
      code_de_travail est une chaîne ANSI = template_code
      code_de_travail = Remplace(code_de_travail, "modele_compilateur_genere", nom_classe_principale_générée)
      // Init date & n° de version
      code_de_travail = Remplace(code_de_travail, "%DATE%", DateVersChaîne(DateSys(), maskDateSystème))
      code_de_travail = Remplace(code_de_travail, "%HEURE%", HeureVersChaîne(HeureSys(), maskHeureSystème))
      code_de_travail = Remplace(code_de_travail, "%VERSION_LEX_BISON%", ProjetInfo(piNomProjet) + " " + ExeInfo(exeVersion) )
      // Mettre le code user de déclaration de grammaire
      code_de_travail = Remplace(code_de_travail, "//%CODE_DECLARATION_MEMBRE%", _to_yaml(:code_wl_declaration_membre))
      // Mettre le code d'init pour déclarer les règles de grammaire
      code_de_travail = Remplace(code_de_travail, "//%CODE_INIT_GRAMMAIRE%", _to_yaml(:code_wl_init))
      // remplacement du nom de la classe lexer a utiliser
      code_de_travail = Remplace(code_de_travail, "modele_lexer_genere", nom_classe_lex_générée)
      
      //OK
      renvoyer (vrai, code_de_travail, "" )
     type : 458752
   -
     name : _genére_code_wl
     procedure_id : 1351446540982348307
     type_code : 12
     code : |1+
      procédure _genére_code_wl(nom_fichier_dest,nom_classe_lex)
      
      dbgAssertion(nom_fichier_dest<>"")
      trace_mode_verbose(:en_mode_verbose,"Génération de " +  nom_fichier_dest )
      
      // nom de la classe a crée
      // ex: "c:\temp^mon_parseur.wdc" => "parseur.wdc"
      nom_classe_générée	est chaîne ANSI	= fExtraitChemin(nom_fichier_dest,fFichier)
      
      // génération en mémoire du code WL
      ok					est un booléen
      code_wl_résultat	est une chaîne ANSI
      message_erreur		est chaîne
      (ok,code_wl_résultat,message_erreur) = _genère_code_bison_apres_compilation(nom_classe_générée,nom_classe_lex)
      SI PAS ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      // sauver le fichier généré sur disque
      fSauveTexte(nom_fichier_dest,code_wl_résultat)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      // OK
      RENVOYER (Vrai, "")
      
     type : 458752
   -
     name : _copie_dépendance
     procedure_id : 1350684411934757931
     type_code : 12
     code : |1+
      PROCÉDURE _copie_dépendance(nom_fichier_dest est chaine)
      répertoire_destination est chaine = fExtraitChemin(nom_fichier_dest,fDisque+fRépertoire)
      Nom_projet est chaine = fExtraitChemin(nom_fichier_dest, fFichier)
      
      // copie simple d'un fichier de dépendance
      procédure interne _copie_1_fichier(nom_court_fichier_dependance est chaine, bEcraseSiExiste est un booléen = faux)
      	_nom_fichier_dest	est chaine			= ComplèteRep(répertoire_destination) +nom_court_fichier_dependance
      	// si il existe déjà, on ne l'écrase pas
      	si fFichierExiste(_nom_fichier_dest) et pas bEcraseSiExiste ALORS
      		renvoyer vrai
      	FIN
      
      	_bin				est un chaine ansi	= charge_ressource_classe(nom_court_fichier_dependance)
      	dbgAssertion(_bin<>"",nom_court_fichier_dependance+rc+ErreurInfo())
      	fSauveBuffer( _nom_fichier_dest, _bin  )
      	SI ErreurDétectée ALORS RENVOYER faux
      	renvoyer vrai
      
      fin
      // copie d'un fichier pour le cas de la création d'un projet complet
      PROCÉDURE INTERNE _copie_1_fichier_prj(nom_court_fichier_dependance est chaine, nom_court_fichier_dest  est chaine="", fnPatch est procédure =null)
      	_bin est un chaine ansi = charge_ressource_classe("..\projet template\"+nom_court_fichier_dependance)
      	SI _bin="" ALORS
      		_bin = fChargeBuffer("..\projet template\"+nom_court_fichier_dependance)
      	FIN
      	// cas du ci
      	SI _bin="" ALORS
      		_bin = fChargeBuffer("..\ci template\CI-template-wd-flex-bison\"+nom_court_fichier_dependance)
      	FIN	
      	// patch
      	SI fnPatch<>Null ALORS
      		fnPatch(_bin)
      	FIN
      	dbgAssertion(_bin<>"",nom_court_fichier_dependance+RC+ErreurInfo())
      	si nom_court_fichier_dest =""
      		nom_court_fichier_dest= fExtraitChemin(nom_court_fichier_dependance,fExtension+fFichier) // comme la source
      	fin
      	fSauveBuffer( ComplèteRep(répertoire_destination) + nom_court_fichier_dest, _bin  )
      	SI ErreurDétectée ALORS RENVOYER Faux
      	RENVOYER Vrai
      		
      FIN
      // patcher le code d'une classe ou un une fenetre pour y mettre le nom du projet destination
      procédure interne _patch_nom_projet(code_wd_inout est chaine ansi)
      	nom_classe est chaine = Nom_projet
      	code_wd_inout = Remplace(code_wd_inout,"COMPILATEUR_GENERE",nom_classe)
      fin
      PROCÉDURE INTERNE _patch_fenetre_test(code_wd_inout est chaîne ANSI)
      	_patch_nom_projet(code_wd_inout)
      	code_wd_inout = Remplace(code_wd_inout,"FICHIER_DE_TEST", :fichier_de_test)
      FIN
      // si on veut crée un projet complet
      si :dest_projet_complet ALORS
      	fRepCrée(répertoire_destination)
      	// copie des élémetnb sur projet + patch
      	SI PAS _copie_1_fichier_prj("FEN_test_du_compilateur.wdw","",_patch_fenetre_test) RENVOYER Faux
      	SI PAS _copie_1_fichier_prj("projet-template-wd-flex-bison.sty",Nom_projet+".sty") RENVOYER Faux
      	SI PAS _copie_1_fichier_prj("projet-template-wd-flex-bison.wdp",Nom_projet+".wdp",_patch_nom_projet ) RENVOYER Faux
      FIN
      // si on veut crée un composant interne
      si :dest_ci_siInexistant alors
      	
      	SI PAS _copie_1_fichier_prj("CI-template-wd-flex-bison.wci","",_patch_nom_projet) RENVOYER Faux
      	
      FIN
      
      // classes de base
      // vrai : on ecrase toujours avec la dernière version 
      si pas _copie_1_fichier("wd_lexer_base.wdc", vrai) renvoyer faux
      SI PAS _copie_1_fichier("wd_compilateur_base.wdc",vrai) RENVOYER Faux
      
      //OK
      renvoyer vrai
      
     type : 458752
   -
     name : _bFichierOuvertDansWinDev
     procedure_id : 1427500005143525600
     type_code : 12
     code : |1+
      // indique si un fichier est ouvert dans WD
      procédure _bFichierOuvertDansWinDev( nom_fichier_dest est chaine) : booléen
      
      si pas fFichierExiste(nom_fichier_dest) ALORS
      	renvoyer faux
      FIN
      
      fichier_dest est un FichierDisque 
      fichier_dest.Ouvre(nom_fichier_dest,foLectureEcriture)
      si ErreurDétectée
      	// erreur : sans doute ouvert dans WD
      	RENVOYER Vrai
      fin
      bOK est un booléen = fichier_dest.Bloque()
      SI pas bOK
      	// erreur : sans doute ouvert dans WD
      	fichier_dest.Ferme()
      	RENVOYER Vrai
      FIN
      
      fichier_dest.Débloque()
      fichier_dest.Ferme()
      	
      // pas d'erreur : pas ouvert dans WD
      RENVOYER faux
     type : 458752
   -
     name : _vérifeDest
     procedure_id : 1427499683020903743
     type_code : 12
     code : |1+
      procédure _vérifeDest( nom_fichier_dest est chaine) : (booléen, chaine)
      
      ERR_BLOQUE_PAR_WD est chaine = " est bloqué. sans doute ouvert dans WinDdev"
      
      // si le fichier dest est ouvert dans WD
      si _bFichierOuvertDansWinDev(nom_fichier_dest) ALORS
      	renvoyer (faux , nom_fichier_dest + ERR_BLOQUE_PAR_WD)
      FIN
      
      // idem pour le projet
      nom_fichier_wdp est chaine = fExtraitChemin(nom_fichier_dest,fDisque+fRépertoire+fFichier) + ".wdp"
      SI _bFichierOuvertDansWinDev(nom_fichier_wdp) ALORS
      	RENVOYER (Faux , nom_fichier_wdp + ERR_BLOQUE_PAR_WD)
      FIN
      
      // + tester dans le repertoire de génération
      rep_dest est chaine = fExtraitChemin(nom_fichier_dest,fDisque+fRépertoire)
      tableau_fichier_wdp est chaine  = fListeFichier(rep_dest + "*.wdp",frNonRécursif)
      // + le répertoire parent si CI
      si :dest_ci_siInexistant alors
      	tableau_fichier_wdp     += [rc] + fListeFichier(rep_dest+ "../*.wdp",frNonRécursif) 
      fin
      POUR TOUTE CHAÎNE nom_wdp DE tableau_fichier_wdp SÉPARÉE PAR rc
      	SI _bFichierOuvertDansWinDev(nom_fichier_wdp) ALORS
      		RENVOYER (Faux , nom_wdp + ERR_BLOQUE_PAR_WD)
      	FIN
      FIN	
      
      
      // OK
      RENVOYER (vrai,"")
     type : 458752
   -
     name : _supprime_répertoire_cpl
     procedure_id : 1432684339858087335
     type_code : 12
     code : |1+
      // supprime le répertoire .cpl du répertoire dest pour forcer une recompilation 
      procédure _supprime_répertoire_cpl(nom_fichier_dest est chaine)
      
      rep_dest est chaine = fExtraitChemin(nom_fichier_dest,fDisque+fRépertoire)
      procédure interne _trouve_rep_cpl()
      	tableau_rep est chaine  = fListeRépertoire (rep_dest ,frNonRécursif)
      	POUR TOUTE CHAÎNE nom_rep DE tableau_rep SÉPARÉE PAR rc
      		SI fExtraitChemin(nom_rep,fExtension)=".cpl"
      			RENVOYER nom_rep // trouvé
      		FIN
      	FIN	
      	RENVOYER "" // pas de .cpl
      fin
      
      
      répertoire_cpl est chaine = _trouve_rep_cpl()
      si répertoire_cpl="" ALORS
      	retour
      FIN
      // blindage
      si fExtraitChemin(répertoire_cpl,fExtension)<>".cpl" ALORS
      	retour
      FIN
      
      fRepSupprime(répertoire_cpl,frRécursif+frVersCorbeille)
      
     type : 458752
   -
     name : génère_compilateur
     procedure_id : 1348426779541106813
     type_code : 12
     code : |1+
      // génération d'une classe WL sur le disque
      // renvoie (vrai,"") ou (faux,<message d'erreur>)
      PROCÉDURE génère_compilateur(nom_fichier_source_lex est chaîne, nom_fichier_source_bison est chaine, nom_fichier_dest est chaine) : (booléen, wd_compilateur_base::ErreurCompile )
      
      ok est un booléen
      erreur_compile est wd_compilateur_base::ErreurCompile 
      
      QUAND EXCEPTION
      	// échec de la compilation.
      	
      	erreur_compile = ChaîneVersJSON(ExceptionInfo(errMessage))
      	
      	renvoyer (faux,erreur_compile) //ExceptionInfo(errMessage))
      FIN
      si nom_fichier_dest="" ALORS
      	_erreur_exception("Fichier destination vide")
      FIN
      
      // on vérifie que la destination n'est pas ouverte / bloqué, que le projet destination n'est pas ouvert
      message_erreur est chaine
      (ok,message_erreur) = _vérifeDest( nom_fichier_dest )
      SI PAS ok ALORS
      	// erreur
      	erreur_compile.message_err = message_erreur
      	RENVOYER (Faux, erreur_compile)
      FIN
      // on supprime le répertoire .cpl pour forcer une recompilation
      _supprime_répertoire_cpl(nom_fichier_dest)
      
      // compilation du fichier .y
      :nom_fichier_source = nom_fichier_source_bison // pour les messages d'erreur
      _parse_grammaire(nom_fichier_source_bison)
      
      // génération des structure internes
      _génere_structure_grammaire()
      
      // compilation du ficher .l
      nom_classe_lex est chaine =  fExtraitChemin(nom_fichier_dest,fFichier)+"_lex"
      nom_fichier_dest_lex est chaine = fExtraitChemin(nom_fichier_dest,fDisque+fRépertoire)+ nom_classe_lex + fExtraitChemin(nom_fichier_dest,fExtension)
      flex est un wdFlex
      flex:dest_en_mode_debug = :dest_en_mode_debug
      flex:en_mode_verbose    = :en_mode_verbose
      flex.génère_lexer( nom_fichier_source_lex,nom_fichier_dest_lex,:token_nom_vers_int)
      
      // génération de la classe "compilateur" sur disque
      (ok,message_erreur)  = _genére_code_wl(nom_fichier_dest,nom_classe_lex)
      SI PAS ok ALORS
      	// erreur
      	erreur_compile.message_err = message_erreur
      	RENVOYER (Faux, erreur_compile)
      FIN	
      
      
      // + on copie les dépendances
      _copie_dépendance(nom_fichier_dest)
      SI ErreurDétectée ALORS
      	// erreur
      	erreur_compile.message_err =  ErreurInfo()
      	RENVOYER (Faux, erreur_compile)
      FIN
      
      //OK
      renvoyer (vrai,erreur_compile)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x12b2a779001aef01
  internal_properties : CAAAAAgAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
