#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wdFlexBisonBase
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x12c3c69f003d223d
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      // classe de base pour wdBison et wdFlex
      wdFlexBisonBase est une Classe
      	hérite de wd_lexer_base
      	numero_regle_en_déclation est entier // durant la déclaration des règles
      	
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1352142699347452477
     type_code : 27
     code : |1+
      procédure Constructeur()
      
     type : 589824
   -
     name : Destructeur
     procedure_id : 1352142699347518013
     type_code : 28
     code : |1+
      procédure Destructeur()
      
     type : 655360
   -
     name : _ajoute_règle_BisonnFlex
     procedure_id : 1352143077304793269
     type_code : 12
     code : |1+
      // ajouter une règle de production interne a wdFlex ou wdBison
      // pour compilation de .l et des .y
      PROCÉDURE PROTÉGÉE _ajoute_règle_BisonnFlex( local valeur_etat est un entier, LOCAL chaine_exacte chaine, LOCAL rexgExp chaine, action est procédure )
      
      regle_production est un wd_lexer_base::RegleDeProductionLex
      regle_production.chaine_exacte	  = chaine_exacte
      regle_production.regexp			  = rexgExp
      regle_production.action			  = action
      regle_production.indice_regle_lex = :numero_regle_en_déclation++
      
      // contruit une regexp pour vérifier que le début du texte match la regexp
      si rexgExp<>"" alors
      	regle_production.regexp_debut	=  ChaîneConstruit("(%1).*",rexgExp) // pour vérifier qu'un début de chaine correspond
      fin
      
      tableau_regle[valeur_etat].Ajoute( regle_production )
     type : 458752
   -
     name : _to_yaml
     procedure_id : 1355640739753991409
     type_code : 12
     code : |1+
      // convestion d'un chaine de code WL en ce qu'il faut mettre dans un fichier au format "texte" .wdc
      PROCÉDURE _to_yaml( LOCAL code_wl  est une chaîne UNICODE) : chaîne ANSI
      
      code_yaml_utf8 est chaîne ANSI =  UnicodeVersAnsi( Remplace( code_wl, RC, RC+"      "), alphabetUTF8) // 6 espace après les Rc pour respecter le format yaml de wd
      RENVOYER code_yaml_utf8 
      
     type : 458752
   -
     name : compile_mode_ligne
     procedure_id : 1418598651018232023
     type_code : 12
     code : |1+
      // compilation d'un texte en mode ligne a ligne
      PROCÉDURE PROTÉGÉE compile_mode_ligne(source_a_compiler est chaine UNICODE)
      
      
      // init de la source et de <source_découpée_en_ligne>
      set_source(source_a_compiler)
      trace_mode_verbose(:en_mode_verbose, ChaîneConstruit("%1 ligne(s) de source" ,  source_découpée_en_ligne.Occurrence()) )
      
      // parcourt des lignes
      POUR numLigne = 1 _a_ :source_découpée_en_ligne.Occurrence()
      	
      	numéro_ligne_en_cours = numLigne
      	soit texte_ligne_en_cours = :source_découpée_en_ligne[numLigne]
      	
      	// recherche d'une règle valide sur <ligne_en_cours>
      	soit règle_a_exécuter <- _recherche_meilleure_règle(etat_courant_lexer , texte_ligne_en_cours)
      	// si on a trouvé aucune règle de production valide
      	SI règle_a_exécuter.règle = Null ALORS
      		// erreur de compilation
      		dernière_erreur_lex = ChaîneConstruit( " %1:%2"+rc+"erreur de syntaxe"+rc+texte_ligne_en_cours, :nom_fichier_source, :numéro_ligne_en_cours, texte_ligne_en_cours ) 
      		RENVOYER (Faux, dernière_erreur_lex, numLigne)
      	FIN
      	
      	// exécuter l'action sur le token trouvé
      	// peut lever une exception si erreur de syntaxe
      	yyline	= numLigne
      	yytext	= règle_a_exécuter.token
      	règle_a_exécuter.règle.action(règle_a_exécuter.token)
      	
      FIN
      
      // succès de la compilation
      
     type : 458752
   -
     name : _supprime_commentaire
     procedure_id : 1428978049374980359
     type_code : 12
     code : |1+
      // supprimer le commentaire // a la fin d'une ligne
      procédure _supprime_commentaire( ligne_de_source est chaine  ) : chaine 
      
      // si il a des commentaires de fin de ligne, on les enlève
      position_marque_commentaire est un entier = Position(ligne_de_source,"//")
      SI 	position_marque_commentaire>0 ALORS
      	// supprimer le commentaire
      	renvoyer Gauche(ligne_de_source, position_marque_commentaire-1)	
      FIN
      renvoyer ligne_de_source
      
     type : 458752
   -
     name : _erreur_exception
     procedure_id : 1429521650505468361
     type_code : 12
     code : |1-
      // appelée en car d'erreur de compilation dans  un .l ou un .y. 
      // lève un exception avec l'erreur
      PROCÉDURE _erreur_exception( message_erreur est chaine) 
      
      erreur_compile est wd_compilateur_base::ErreurCompile 
      erreur_compile.fichier_source = :nom_fichier_source
      erreur_compile.num_ligne      = :numéro_ligne_en_cours
      erreur_compile.message_err    = message_erreur
      erreur_compile.pile_dbg		  = dbgInfo (dbgPile)
      
      // construit un message d'erreur au format 
      // fichier:ligne + RC + détail de l'erreur
      message_complet_json		est chaine = VariantVersJSON(erreur_compile,psdMiseEnForme)
      ExceptionDéclenche(Erreur_compilation,message_complet_json)
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x12c3c69a003a0f23
  internal_properties : CAAAAAgAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
