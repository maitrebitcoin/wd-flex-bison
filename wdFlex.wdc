#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wdFlex
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x122df02c004403ca
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      wdFlex est une Classe
      	hérite de wdFlexBisonBase
      	
      	// Remplis durant la phase de compilation
      
      	// code utilisateur a mettre dans la déclaration de la classe pour ajouter des membre
      	code_wl_declaration est chaine unicode
      	// code de déclaration des valeurs des tokens. selon le tableau fourni par la grammaire
      	code_wl_declaration_token est une chaîne 
      	// règles de productions pour le lexer
      	tab_règle_production_lex est un tableau de stToken2Code
      
      	
      fin
      EEtat est un enumeration
      	Tout_Etat					= 1 
      	Declaration_SymboleEtOption = 2
      	Declaration_CodeUser	    = 3 // entre [% et %]
      	Avant_Règles			    = 4
      	Declaration_Règles		    = 5 // entre  %% et %% final
      	Apres_Règles			    = 6 // après le %% final
      
      
      fin
      // définie la règle a exécuter sur chaque token trouvé durant la compilation
      stToken2Code est une structure
      	// token trouvé. ex: " " ou "34"
      	token		est chaine		
      	// code WL a produire
      	code_wl		est chaine
      	// chaine source + n° de ligne (en mode debug)
      	numligne_source est un entier
      	code_source est chaine
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1309967138408432586
     type_code : 27
     code : |1+
      procédure Constructeur()
      
      // Init un tableau a 7 él&ments vide
      :tableau_regle = allouer un tableau de 7 tableaux de wd_lexer_base::RegleDeProductionLex 
      // Init des règles de parsing pour produire le lexer
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "%{","",     (yyText)=>{ _changeState(Declaration_CodeUser) } )
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "",".*",     (yyText)=>{ } ) // pas d'options pour l'instant, on ignore tout
      _ajoute_règle_BisonnFlex(Declaration_CodeUser, 		   "%}","",     (yyText)=>{ _changeState(Avant_Règles) } )
      _ajoute_règle_BisonnFlex(Declaration_CodeUser, 		   "",".*",     (yyText)=>{ :code_wl_declaration += [RC] + yyText } )
      _ajoute_règle_BisonnFlex(Declaration_SymboleEtOption,  "%%","",     (yyText)=>{ _changeState(Declaration_Règles) } )
      _ajoute_règle_BisonnFlex(Avant_Règles, 	 	  		   "%%","",     (yyText)=>{ _changeState(Declaration_Règles) } )
      _ajoute_règle_BisonnFlex(Declaration_Règles, 		   "%%","",     (yyText)=>{ _changeState(Apres_Règles) }  )
      _ajoute_règle_BisonnFlex(Declaration_Règles,  		   "",".*",     (yyText)=>{ _parse_ligne_regle_flex(yyText, yyline)  } )
      _ajoute_règle_BisonnFlex(Tout_Etat, 		  		   "","",       (yyText)=>{ } ) // ignorer les lignes vides
      _ajoute_règle_BisonnFlex(Tout_Etat, 		  		   "","[ \t]*", (yyText)=>{ } ) // ignorer les lignes avec que des espaces ou tab
     type : 589824
   -
     name : _parse_ligne_regle_flex
     procedure_id : 1346228860097493441
     type_code : 12
     code : |1+
      // analyser une règle de production du lexer
      // ex: 
      // {blanks}        { /* ignore */ }
      procédure  _parse_ligne_regle_flex(ligne_source est chaine, numero_de_ligne est entier) 
      dbgAssertion(numero_de_ligne>0)
      
      // ignorer les lignes vides
      si ligne_source="" ALORS retour
      // ignorer les commentaires : @Non, rendrait difficile la création d'un token \ 
      //SI gauche(ligne_source,2)="\\") ALORS RETOUR
      
      ligne_sans_tab est chaine = remplace(ligne_source,TAB," ") // TAB ou " " sont équivalents
      
      // recherche de la position de fin de la regexp
      pos_fin_rexp est entier
      dans_crochet est un booléen 
      pour pos_fin_rexp = 1 _a_ taille(ligne_sans_tab)
      	c est chaine = ligne_sans_tab[pos_fin_rexp]
      	selon c
      		CAS " ":
      			 si pas dans_crochet alors sortir
      		cas "[": dans_crochet = vrai
      		cas "]": dans_crochet = faux
      	FIN
      FIN
      // si fin de rexep non trouvée
      si pos_fin_rexp>Taille(ligne_sans_tab) alors
      	// Erreur
      	_erreur("Erreur de syntaxe")
      FIN
      // récupération de l'expression de gauche, ex : "{blanks}"
      expression_gauche est chaine = Gauche(ligne_sans_tab, pos_fin_rexp-1)
      // sauter tous les espaces
      pos_debut_code est un entier = pos_fin_rexp
      tantque expression_gauche[pos_debut_code]=" "
      	pos_debut_code++
      FIN
      // récupération du code utilisateur si on trouve le token <ligne_sans_tab>
      code_wl_user est chaine =  Milieu(ligne_sans_tab,pos_debut_code)
      // si il a des commentaires de fin de ligne, on les enlève
      position_marque_commentaire est un entier = position(code_wl_user,"//")
      SI 	position_marque_commentaire>0 ALORS
      	code_wl_user = gauche(code_wl_user, position_marque_commentaire-1)	
      FIN
      // pas d'espace
      code_wl_user = SansEspace(code_wl_user,sscExtérieur)
      // "," tout seul est invalide en WL
      if (code_wl_user=";") code_wl_user= ""
      
      // enlever les {} autour du code si il sont présent
      si code_wl_user[1]="{" _et_ droite(code_wl_user,1)="}" ALORS
      	code_wl_user = milieu(code_wl_user,2,taille(code_wl_user)-2)
      FIN
      
      // ajoute a la table
      stInfo est un stToken2Code
      stInfo.token   		    = expression_gauche
      stInfo.code_wl  		= code_wl_user
      stInfo.numligne_source  = numero_de_ligne
      stInfo.code_source	    = ligne_source
      tab_règle_production_lex.Ajoute(stInfo)
     type : 458752
   -
     name : Destructeur
     procedure_id : 1309967138408498122
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : génère_lexer
     procedure_id : 1309967391812349201
     type_code : 12
     code : |1+
      // génération d'une classe WL lexer sur le disque
      // renvoie (vrai,"") ou (faux,<message d'erreur>)
      procédure génère_lexer(nom_fichier_source_lex est chaine, nom_fichier_dest est chaine, token_nom_vers_int est un tableau associatif d'entiers) : (booléen, chaine)
      
      // noter le nom fichier source pour debug
      :nom_fichier_source  = nom_fichier_source_lex
      trace_mode_verbose(:en_mode_verbose,"Analyse de " +  nom_fichier_source_lex )
      
      // chargement du fichier .l
      source_lexer est chaine UNICODE = charge_fichier_source(nom_fichier_source_lex)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      
      // init a l'état initial
      _changeState(Declaration_SymboleEtOption)
      // compilation avec le mode spécial ligne a ligne
      soit (ok,message_erreur) = compile_mode_ligne(source_lexer)
      si pas ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      // code de déclaration des token
      // EX : 
      // CONSTANT T_PLUS=257
      // CONSTANT T_MINUS=258Z
      trace_mode_verbose(:en_mode_verbose, ChaîneConstruit("%1 token(s) trouvé",  token_nom_vers_int.Occurrence() ))
      :code_wl_declaration_token=""
      POUR TOUT valeur_token,nomToken DE token_nom_vers_int
      	:code_wl_declaration_token += [RC]+"CONSTANT " + nomToken+"=" + valeur_token
      FIN
      
      // génération de la classe sur disque
      trace_mode_verbose(:en_mode_verbose,"génération de " +  nom_fichier_dest )
      (ok,message_erreur)  = _genére_code_wl(nom_fichier_dest)
      SI PAS ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN	
      
      // succès de la génération d'une classe WL pour compiler
      renvoyer (Vrai,"")
     type : 458752
   -
     name : _changeState
     procedure_id : 1345972635227731108
     type_code : 12
     code : |1+
      // change l'état courant
      procédure _changeState( e EEtat )
      :etat_courant_lexer = e.Valeur
     type : 458752
   -
     name : _genére_code_wl
     procedure_id : 1315080112286971194
     type_code : 12
     code : |1+
      // génération du code du lexer apres un appel a bParse
      procédure protégée _genére_code_wl( nom_fichier_dest est chaine ) : (booléen, chaine)
      dbgAssertion(nom_fichier_dest<>"")
      
      // nom de la classe a crée
      // ex: "c:\temp^mon_parseur.wdc" => "parseur.wdc"
      nom_classe_générée est chaine ansi = fExtraitChemin(nom_fichier_dest,fFichier)
      
      // génération en mémoire du code WL
      ok est un booléen
      code_wl_résultat est une chaine ansi
      message_erreur est chaine
      (ok,code_wl_résultat,message_erreur) = _genère_code_lexer_apres_compilation(nom_classe_générée)
      si pas ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      // sauver le fichier généré sur disque
      fSauveTexte(nom_fichier_dest,code_wl_résultat)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      // OK
      RENVOYER (Vrai, "")
     type : 458752
   -
     name : _genère_code_lexer_apres_compilation
     procedure_id : 1345896446802101953
     type_code : 12
     code : |1+
      // génération du code du lexer apres un appel a _compile()
      // renvoie (vrai, <code WL du lexer>, "") ou (faux, "", <message d'erreur>)
      procédure _genère_code_lexer_apres_compilation(nom_classe_générée est chaine ansi) :  (booléen, chaine ansi, chaine)
      
      
      // chargement du code  wl template
      template_code est chaine ansi = charge_ressource_classe("modele_lexer_genere.wdc")
      si ErreurDétectée ALORS
      	// erreur
      	renvoyer (Faux, "", erreurinfo())
      FIN
      
      //  Modifier le nom de la classe
      code_de_travail est une chaine ansi = template_code
      code_de_travail = Remplace(code_de_travail, "modele_lexer_genere", nom_classe_générée)
      
      // Insérer le code user de déclaration
      code_de_travail = Remplace(code_de_travail, "//%CODE_DECLARATION_MEMBRE%", _to_yaml( :code_wl_declaration ))
      // Insérer le  code de déclaration des tokens
      code_de_travail = Remplace(code_de_travail, "//%CODE_DECLARATION_TOKEN%", _to_yaml(:code_wl_declaration_token))
      
      
      // code pour déclarer les règle de production
      // ex : _ajoute_règle_production( STATE,  "%{","",  ()=> { _changeState(Declaration_CodeUser) } )
      nombre_etat_max_lexer est un entier = :tab_règle_production_lex.Occurrence()
      code_init_ChaineVersToken est chaine = "// source : """ + :nom_fichier_source + """" + rc
      code_init_ChaineVersToken           += ChaîneConstruit(":tableau_regle = allouer un tableau de %1 tableaux de wd_lexer_base::RegleDeProductionLex " , nombre_etat_max_lexer)
      code_gestion_token est chaine = rc //pour remplacer //%CODE_GESTION_TOKEN%
      token_vers_code_wl est stToken2Code
      indice_règle est entier = 1
      pour tout token_vers_code_wl de :tab_règle_production_lex
      	param_etat est chaine = "Etat_lexer_tous"
      	chaine_exacte est chaine  = """""" // 2 quotes = chaine vide
      	rexgExp est chaine 		 
      	// si c'est au format "A" => on prend la chaine exacte
      	si token_vers_code_wl.token[1] = """" alors
      		chaine_exacte = token_vers_code_wl.token
      	sinon
      		rexgExp       = token_vers_code_wl.token
      	fin
      	dbgAssertion(token_vers_code_wl.numligne_source>0)
      	source_dump est chaine =  :nom_fichier_source + ":" + token_vers_code_wl.numligne_source
      	SI :dest_en_mode_debug ALORS
      		source_dump += " "  + remplace(:source_découpée_en_ligne[token_vers_code_wl.numligne_source] ,"""","") // pas de " dans le dump
      	FIN
      
      	// construit la chaine finale
      	code_init_ChaineVersToken += [RC] + chaineconstruit( "_ajoute_règle_production_lex( %1,%2,""%3"", %4, ""%5"" )", param_etat,chaine_exacte,rexgExp,indice_règle, source_dump )
      	code_gestion_token       +=  chaineconstruit( tab+ "// %1"+rc+tab+tab+" cas %2 : %3"+rc , token_vers_code_wl.token, indice_règle, token_vers_code_wl.code_wl )
      	indice_règle++
      FIN
      
      code_de_travail= Remplace(code_de_travail,"//%CODE_INIT_CHAINEVERSTOKEN%", _to_yaml(code_init_ChaineVersToken))
      code_de_travail= Remplace(code_de_travail,"//%CODE_GESTION_TOKEN%",	 	   _to_yaml(code_gestion_token ))
      
      // OK
      renvoyer (vrai,code_de_travail,"")
      
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x122df0200041d538
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
