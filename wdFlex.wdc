#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : wdFlex
 major_version : 27
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x122df02c004403ca
 internal_properties : BwAAAAcAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      wdFlex est une Classe
      	hérite de wd_compilateur_base
      	
      	// Remplis durant la phase de compilation
      
      	// code utilisateur a mettre dans la déclaration de la classe pour ajouter des membre
      	code_wl_declaration est chaine
      	// règles de productions pour le lexer
      	m_tabToken2Code est un tableau de stToken2Code
      	
      fin
      EEtat est un enumeration
      	Tout_Etat = 1 
      	Declaration_CodeUser = 2 // entre [% et %]
      	Declaration_SymboleEtOption = 3
      	Expression = 4 // apres %%
      
      fin
      // définie la règle a exécuter sur chaque token trouvé durant la compilation
      stToken2Code est une structure
      	// token trouvé. ex: " " ou "34"
      	token		est chaine		
      	// code WL a produire
      	code_wl		est chaine
      FIN
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1309967138408432586
     type_code : 27
     code : |1-
      procédure Constructeur()
      
      // Init un tableau a vide
      :tableau_regle = allouer un tableau de 4 tableaux de wd_compilateur_base::ExpressionVersAction 
      // Init des expression et actions
      _ajoute_règle_production(Declaration_SymboleEtOption,  "%{","",     ()=> { _changeState(Declaration_CodeUser) } )
      _ajoute_règle_production(Declaration_SymboleEtOption,  "",".*",     (s)=>{ code_wl_declaration += [RC] + s  } )
      _ajoute_règle_production(Declaration_CodeUser, 		   "%}","",     ()=> { _changeState(Declaration_SymboleEtOption) } )
      _ajoute_règle_production(Declaration_CodeUser, 		   "",".*",     (s)=>{ _parseCodeUser(s) } )
      _ajoute_règle_production(Declaration_CodeUser,  	   "%%","",     ()=> { _changeState(Expression) } )
      _ajoute_règle_production(Expression, 		  		   "",".*",     (s)=>{  } )
      _ajoute_règle_production(Tout_Etat, 		  		   "","",       (s)=>{ } ) // ignorer les lignes vides
      _ajoute_règle_production(Tout_Etat, 		  		   "","[ \t]*", (s)=>{ } ) // ignorer les lignes avec que des espaces ou tab
      
      
      	// découper une déclaration de lexer.
      	// ex: 
      	// {blanks}        { /* ignore */ }
      		procédure interne _parseCodeUser(s est chaine) 
      			s2 est chaine = remplace(s,TAB," ") // TAB ou " " sont équivalents
      			// recherche le 1er espace
      			nPosEspace est entier = position(s2," ")
      			si nPosEspace<=0 alors
      				// Erreur
      				ExceptionDéclenche(1,"Erreur de syntaxe : " + s)
      			FIN
      			// récupération de l'expression de gauche, ex : "{blanks}"
      			sExpression est chaine = Gauche(s2, nPosEspace)
      			// sauter tous les espaces
      			tantque s2[nPosEspace]=" "
      				nPosEspace++
      			FIN
      			// récupération du code utilisateur si on trouve le token <sExpression>
      			sCode est chaine = Milieu(s2,nPosEspace+1)
      			// ajoute a la table
      			stInfo est un stToken2Code
      			stInfo.token = sExpression
      			stInfo.code_wl  = sCode
      			m_tabToken2Code.Ajoute(stInfo)
      		fin
     type : 589824
   -
     name : Destructeur
     procedure_id : 1309967138408498122
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : génère_compilateur
     procedure_id : 1309967391812349201
     type_code : 12
     code : |1+
      // génération d'une classe WL sur le disque
      // renvoie (vrai,"") ou (faux,<message d'erreur>)
      procédure génère_compilateur(nom_fichier_source_lex est chaine, nom_fichier_dest est chaine) : (booléen, chaine)
      
      // chargement du fichier .l
      source_lexer est chaine = fChargeTexte(nom_fichier_source_lex)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      
      // init a l'état initial
      _changeState(Declaration_SymboleEtOption)
      // compilation avec le mode spécial ligne a ligne
      soit (ok,message_erreur) = _compile_mode_ligne(source_lexer)
      si pas ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      // génération de la classe sur disque
      (ok,message_erreur)  = _genére_code_wl(nom_fichier_dest)
      SI PAS ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN	
      
      // succès de la génération d'une classe WL pour compiler
      renvoyer (Vrai,"")
     type : 458752
   -
     name : _changeState
     procedure_id : 1345972635227731108
     type_code : 12
     code : |1+
      // change l'état courant
      procédure _changeState( e EEtat )
      :etat_courant_lexer = e.Valeur
     type : 458752
   -
     name : _genére_code_wl
     procedure_id : 1315080112286971194
     type_code : 12
     code : |1+
      // génération du code du lexer apres un appel a bParse
      procédure protégée _genére_code_wl( nom_fichier_dest est chaine ) : (booléen, chaine)
      dbgAssertion(nom_fichier_dest<>"")
      
      // nom de la classe a crée
      // ex: "c:\temp^mon_parseur.wdc" => "parseur.wdc"
      nom_classe_générée est chaine ansi = fExtraitChemin(nom_fichier_dest,fFichier)
      
      // génération en mémoire du code WL
      ok est un booléen
      code_wl_résultat est une chaine ansi
      message_erreur est chaine
      (ok,code_wl_résultat,message_erreur) = _genère_code_lexer_apres_compilation(nom_classe_générée)
      si pas ok ALORS
      	// erreur
      	RENVOYER (Faux, message_erreur)
      FIN
      
      // sauver le fichier généré sur disque
      fSauveTexte(nom_fichier_dest,code_wl_résultat)
      SI ErreurDétectée ALORS
      	// erreur
      	RENVOYER (Faux, ErreurInfo())
      FIN
      // OK
      RENVOYER (Vrai, "")
     type : 458752
   -
     name : _genère_code_lexer_apres_compilation
     procedure_id : 1345896446802101953
     type_code : 12
     code : |1+
      // génération du code du lexer apres un appel a _compile()
      // renvoie (vrai, <code WL du lexer>, "") ou (faux, "", <message d'erreur>)
      procédure _genère_code_lexer_apres_compilation(nom_classe_générée est chaine ansi) :  (booléen, chaine ansi, chaine)
      
      // chargement du code  wl template
      template_code est chaine ansi = fChargeBuffer("..\\wd_compilateur_template.wdc")
      si ErreurDétectée ALORS
      	// erreur
      	renvoyer (Faux, "", erreurinfo())
      FIN
      
      //  Modifier le nom de la classe
      code_de_travail est une chaine ansi = template_code
      code_de_travail = Remplace(code_de_travail, "lexerTemplate", nom_classe_générée)
      
      // Insérer le code user de déclaration
      code_de_travail = Remplace(code_de_travail, "//%CODE_DECLARATION_MEMBRE%", code_wl_declaration)
      
      // code pour déclarer les règle de production
      // ex : _add( STATE,  "%{","",  ()=> { _changeState(Declaration_CodeUser) } )
      code_init_ChaineVersToken est chaine
      token_vers_code_wl est stToken2Code
      pour tout token_vers_code_wl de :m_tabToken2Code
      	param_etat est chaine = "Etat_lexer_tous"
      	chaine_exacte est chaine  = """""" // 2 quotes = chaine vide
      	rexgExp est chaine 		 
      	// ex :  (yytext; )=>{ m_sCode_Declaration += [RC] + yytext  } )
      	code_action_lambda est chaine = ChaîneConstruit(" (yytext)=> { %1 }", token_vers_code_wl.code_wl )
      	// si c'est au format "A" => on prend la chaine exacte
      	si token_vers_code_wl.token[1] = """" alors
      		chaine_exacte = token_vers_code_wl.token
      	sinon
      		rexgExp       = token_vers_code_wl.token
      	fin
      	// construit la chaine finale
      	code_init_ChaineVersToken += [RC] + chaineconstruit( "_ajoute_règle_production( %1,%2,""%3"",(token)=>{%4} )", param_etat,chaine_exacte,rexgExp,code_action_lambda )
      FIN
      
      Remplace(code_de_travail,"//%CODE_INIT_CHAINEVERSTOKEN%", code_init_ChaineVersToken)
      
      // OK
      RENVOYER (vrai, code_de_travail, "")
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BwAAAAcAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x122df0200041d538
  internal_properties : BwAAAAcAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BwAAAAcAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
